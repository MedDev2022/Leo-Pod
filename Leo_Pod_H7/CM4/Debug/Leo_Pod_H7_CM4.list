
Leo_Pod_H7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f8  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08102390  08102390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081023b4  081023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081023b8  081023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081023bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       0000017c  10000010  081023cc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  1000018c  08102548  0002018c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000248  08102548  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fb50  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002212  00000000  00000000  0002fd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b10  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000087d  00000000  00000000  00032a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039209  00000000  00000000  000332f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e19  00000000  00000000  0006c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017928e  00000000  00000000  0007d317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002c38  00000000  00000000  001f65a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001f91e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000018c 	.word	0x1000018c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102378 	.word	0x08102378

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000190 	.word	0x10000190
 81002d4:	08102378 	.word	0x08102378

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1f      	ldr	r3, [pc, #124]	; (810038c <main+0x84>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1d      	ldr	r2, [pc, #116]	; (810038c <main+0x84>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1b      	ldr	r3, [pc, #108]	; (810038c <main+0x84>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f001 f8ad 	bl	810148c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f001 f937 	bl	81015a4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f001 f8b8 	bl	81014b0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b13      	ldr	r3, [pc, #76]	; (8100390 <main+0x88>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b11      	ldr	r3, [pc, #68]	; (8100394 <main+0x8c>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a0f      	ldr	r2, [pc, #60]	; (8100394 <main+0x8c>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0c      	ldr	r3, [pc, #48]	; (8100394 <main+0x8c>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0b      	ldr	r2, [pc, #44]	; (8100394 <main+0x8c>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f910 	bl	8100594 <HAL_Init>
//  DayCam camera(&huart1);

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 8100374:	f000 f818 	bl	81003a8 <MX_RESMGR_UTILITY_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8100378:	2102      	movs	r1, #2
 810037a:	4807      	ldr	r0, [pc, #28]	; (8100398 <main+0x90>)
 810037c:	f001 f83e 	bl	81013fc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8100380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100384:	f000 f9ba 	bl	81006fc <HAL_Delay>
	  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8100388:	e7f6      	b.n	8100378 <main+0x70>
 810038a:	bf00      	nop
 810038c:	58024400 	.word	0x58024400
 8100390:	e000ed00 	.word	0xe000ed00
 8100394:	58026400 	.word	0x58026400
 8100398:	58021000 	.word	0x58021000

0810039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810039c:	b480      	push	{r7}
 810039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81003a0:	b672      	cpsid	i
}
 81003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81003a4:	e7fe      	b.n	81003a4 <Error_Handler+0x8>
	...

081003a8 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 81003a8:	b580      	push	{r7, lr}
 81003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 81003ac:	4905      	ldr	r1, [pc, #20]	; (81003c4 <MX_RESMGR_UTILITY_Init+0x1c>)
 81003ae:	4806      	ldr	r0, [pc, #24]	; (81003c8 <MX_RESMGR_UTILITY_Init+0x20>)
 81003b0:	f001 ff20 	bl	81021f4 <ResMgr_Init>
 81003b4:	4603      	mov	r3, r0
 81003b6:	2b00      	cmp	r3, #0
 81003b8:	d001      	beq.n	81003be <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 81003ba:	f7ff ffef 	bl	810039c <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 81003be:	bf00      	nop
 81003c0:	bd80      	pop	{r7, pc}
 81003c2:	bf00      	nop
 81003c4:	08100419 	.word	0x08100419
 81003c8:	081003cd 	.word	0x081003cd

081003cc <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 81003cc:	b480      	push	{r7}
 81003ce:	b083      	sub	sp, #12
 81003d0:	af00      	add	r7, sp, #0
 81003d2:	6078      	str	r0, [r7, #4]
 81003d4:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 81003d6:	683b      	ldr	r3, [r7, #0]
 81003d8:	2b05      	cmp	r3, #5
 81003da:	d811      	bhi.n	8100400 <MX_RESMGR_UTILITY_SendMsg+0x34>
 81003dc:	683b      	ldr	r3, [r7, #0]
 81003de:	2b05      	cmp	r3, #5
 81003e0:	d811      	bhi.n	8100406 <MX_RESMGR_UTILITY_SendMsg+0x3a>
 81003e2:	a201      	add	r2, pc, #4	; (adr r2, 81003e8 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 81003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81003e8:	08100407 	.word	0x08100407
 81003ec:	08100407 	.word	0x08100407
 81003f0:	08100407 	.word	0x08100407
 81003f4:	08100407 	.word	0x08100407
 81003f8:	08100407 	.word	0x08100407
 81003fc:	08100407 	.word	0x08100407
 8100400:	683b      	ldr	r3, [r7, #0]
 8100402:	2bff      	cmp	r3, #255	; 0xff
 8100404:	d001      	beq.n	810040a <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8100406:	bf00      	nop
 8100408:	e000      	b.n	810040c <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 810040a:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 810040c:	bf00      	nop
}
 810040e:	370c      	adds	r7, #12
 8100410:	46bd      	mov	sp, r7
 8100412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100416:	4770      	bx	lr

08100418 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8100418:	b480      	push	{r7}
 810041a:	b083      	sub	sp, #12
 810041c:	af00      	add	r7, sp, #0
 810041e:	6078      	str	r0, [r7, #4]
 8100420:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8100422:	683b      	ldr	r3, [r7, #0]
 8100424:	2b15      	cmp	r3, #21
 8100426:	d831      	bhi.n	810048c <MX_RESMGR_UTILITY_Callback+0x74>
 8100428:	683b      	ldr	r3, [r7, #0]
 810042a:	2b15      	cmp	r3, #21
 810042c:	d831      	bhi.n	8100492 <MX_RESMGR_UTILITY_Callback+0x7a>
 810042e:	a201      	add	r2, pc, #4	; (adr r2, 8100434 <MX_RESMGR_UTILITY_Callback+0x1c>)
 8100430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100434:	08100493 	.word	0x08100493
 8100438:	08100493 	.word	0x08100493
 810043c:	08100493 	.word	0x08100493
 8100440:	08100493 	.word	0x08100493
 8100444:	08100493 	.word	0x08100493
 8100448:	08100493 	.word	0x08100493
 810044c:	08100493 	.word	0x08100493
 8100450:	08100493 	.word	0x08100493
 8100454:	08100493 	.word	0x08100493
 8100458:	08100493 	.word	0x08100493
 810045c:	08100493 	.word	0x08100493
 8100460:	08100493 	.word	0x08100493
 8100464:	08100493 	.word	0x08100493
 8100468:	08100493 	.word	0x08100493
 810046c:	08100493 	.word	0x08100493
 8100470:	08100493 	.word	0x08100493
 8100474:	08100493 	.word	0x08100493
 8100478:	08100493 	.word	0x08100493
 810047c:	08100493 	.word	0x08100493
 8100480:	08100493 	.word	0x08100493
 8100484:	08100493 	.word	0x08100493
 8100488:	08100493 	.word	0x08100493
 810048c:	683b      	ldr	r3, [r7, #0]
 810048e:	2bff      	cmp	r3, #255	; 0xff
 8100490:	d001      	beq.n	8100496 <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8100492:	bf00      	nop
 8100494:	e000      	b.n	8100498 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 8100496:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 8100498:	bf00      	nop
}
 810049a:	370c      	adds	r7, #12
 810049c:	46bd      	mov	sp, r7
 810049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004a2:	4770      	bx	lr

081004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004a4:	b480      	push	{r7}
 81004a6:	b083      	sub	sp, #12
 81004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004aa:	4b0a      	ldr	r3, [pc, #40]	; (81004d4 <HAL_MspInit+0x30>)
 81004ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004b0:	4a08      	ldr	r2, [pc, #32]	; (81004d4 <HAL_MspInit+0x30>)
 81004b2:	f043 0302 	orr.w	r3, r3, #2
 81004b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81004ba:	4b06      	ldr	r3, [pc, #24]	; (81004d4 <HAL_MspInit+0x30>)
 81004bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004c0:	f003 0302 	and.w	r3, r3, #2
 81004c4:	607b      	str	r3, [r7, #4]
 81004c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004c8:	bf00      	nop
 81004ca:	370c      	adds	r7, #12
 81004cc:	46bd      	mov	sp, r7
 81004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004d2:	4770      	bx	lr
 81004d4:	58024400 	.word	0x58024400

081004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81004d8:	b480      	push	{r7}
 81004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81004dc:	e7fe      	b.n	81004dc <NMI_Handler+0x4>

081004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81004de:	b480      	push	{r7}
 81004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81004e2:	e7fe      	b.n	81004e2 <HardFault_Handler+0x4>

081004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81004e4:	b480      	push	{r7}
 81004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81004e8:	e7fe      	b.n	81004e8 <MemManage_Handler+0x4>

081004ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81004ea:	b480      	push	{r7}
 81004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81004ee:	e7fe      	b.n	81004ee <BusFault_Handler+0x4>

081004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81004f0:	b480      	push	{r7}
 81004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81004f4:	e7fe      	b.n	81004f4 <UsageFault_Handler+0x4>

081004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81004f6:	b480      	push	{r7}
 81004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81004fa:	bf00      	nop
 81004fc:	46bd      	mov	sp, r7
 81004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100502:	4770      	bx	lr

08100504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100504:	b480      	push	{r7}
 8100506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100508:	bf00      	nop
 810050a:	46bd      	mov	sp, r7
 810050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100510:	4770      	bx	lr

08100512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100512:	b480      	push	{r7}
 8100514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100516:	bf00      	nop
 8100518:	46bd      	mov	sp, r7
 810051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810051e:	4770      	bx	lr

08100520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100520:	b580      	push	{r7, lr}
 8100522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100524:	f000 f8ca 	bl	81006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100528:	bf00      	nop
 810052a:	bd80      	pop	{r7, pc}

0810052c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 810052c:	b580      	push	{r7, lr}
 810052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8100530:	4802      	ldr	r0, [pc, #8]	; (810053c <USART1_IRQHandler+0x10>)
 8100532:	f001 f9bf 	bl	81018b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8100536:	bf00      	nop
 8100538:	bd80      	pop	{r7, pc}
 810053a:	bf00      	nop
 810053c:	100001a8 	.word	0x100001a8

08100540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100578 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100544:	f7ff fec8 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100548:	480c      	ldr	r0, [pc, #48]	; (810057c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810054a:	490d      	ldr	r1, [pc, #52]	; (8100580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810054c:	4a0d      	ldr	r2, [pc, #52]	; (8100584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100550:	e002      	b.n	8100558 <LoopCopyDataInit>

08100552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100556:	3304      	adds	r3, #4

08100558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810055c:	d3f9      	bcc.n	8100552 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810055e:	4a0a      	ldr	r2, [pc, #40]	; (8100588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100560:	4c0a      	ldr	r4, [pc, #40]	; (810058c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100564:	e001      	b.n	810056a <LoopFillZerobss>

08100566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100568:	3204      	adds	r2, #4

0810056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810056c:	d3fb      	bcc.n	8100566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810056e:	f001 fedf 	bl	8102330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100572:	f7ff fec9 	bl	8100308 <main>
  bx  lr
 8100576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100578:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810057c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100580:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100584:	081023bc 	.word	0x081023bc
  ldr r2, =_sbss
 8100588:	1000018c 	.word	0x1000018c
  ldr r4, =_ebss
 810058c:	10000248 	.word	0x10000248

08100590 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100590:	e7fe      	b.n	8100590 <ADC3_IRQHandler>
	...

08100594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100594:	b580      	push	{r7, lr}
 8100596:	b082      	sub	sp, #8
 8100598:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810059a:	4b28      	ldr	r3, [pc, #160]	; (810063c <HAL_Init+0xa8>)
 810059c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005a0:	4a26      	ldr	r2, [pc, #152]	; (810063c <HAL_Init+0xa8>)
 81005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81005a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81005aa:	4b24      	ldr	r3, [pc, #144]	; (810063c <HAL_Init+0xa8>)
 81005ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81005b4:	603b      	str	r3, [r7, #0]
 81005b6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005b8:	4b21      	ldr	r3, [pc, #132]	; (8100640 <HAL_Init+0xac>)
 81005ba:	681b      	ldr	r3, [r3, #0]
 81005bc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81005c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81005c4:	4a1e      	ldr	r2, [pc, #120]	; (8100640 <HAL_Init+0xac>)
 81005c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81005ca:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81005cc:	4b1c      	ldr	r3, [pc, #112]	; (8100640 <HAL_Init+0xac>)
 81005ce:	681b      	ldr	r3, [r3, #0]
 81005d0:	4a1b      	ldr	r2, [pc, #108]	; (8100640 <HAL_Init+0xac>)
 81005d2:	f043 0301 	orr.w	r3, r3, #1
 81005d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81005d8:	2003      	movs	r0, #3
 81005da:	f000 f965 	bl	81008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81005de:	f000 ffef 	bl	81015c0 <HAL_RCC_GetSysClockFreq>
 81005e2:	4602      	mov	r2, r0
 81005e4:	4b15      	ldr	r3, [pc, #84]	; (810063c <HAL_Init+0xa8>)
 81005e6:	699b      	ldr	r3, [r3, #24]
 81005e8:	0a1b      	lsrs	r3, r3, #8
 81005ea:	f003 030f 	and.w	r3, r3, #15
 81005ee:	4915      	ldr	r1, [pc, #84]	; (8100644 <HAL_Init+0xb0>)
 81005f0:	5ccb      	ldrb	r3, [r1, r3]
 81005f2:	f003 031f 	and.w	r3, r3, #31
 81005f6:	fa22 f303 	lsr.w	r3, r2, r3
 81005fa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81005fc:	4b0f      	ldr	r3, [pc, #60]	; (810063c <HAL_Init+0xa8>)
 81005fe:	699b      	ldr	r3, [r3, #24]
 8100600:	f003 030f 	and.w	r3, r3, #15
 8100604:	4a0f      	ldr	r2, [pc, #60]	; (8100644 <HAL_Init+0xb0>)
 8100606:	5cd3      	ldrb	r3, [r2, r3]
 8100608:	f003 031f 	and.w	r3, r3, #31
 810060c:	687a      	ldr	r2, [r7, #4]
 810060e:	fa22 f303 	lsr.w	r3, r2, r3
 8100612:	4a0d      	ldr	r2, [pc, #52]	; (8100648 <HAL_Init+0xb4>)
 8100614:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100616:	4b0c      	ldr	r3, [pc, #48]	; (8100648 <HAL_Init+0xb4>)
 8100618:	681b      	ldr	r3, [r3, #0]
 810061a:	4a0c      	ldr	r2, [pc, #48]	; (810064c <HAL_Init+0xb8>)
 810061c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810061e:	200f      	movs	r0, #15
 8100620:	f000 f816 	bl	8100650 <HAL_InitTick>
 8100624:	4603      	mov	r3, r0
 8100626:	2b00      	cmp	r3, #0
 8100628:	d001      	beq.n	810062e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810062a:	2301      	movs	r3, #1
 810062c:	e002      	b.n	8100634 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810062e:	f7ff ff39 	bl	81004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100632:	2300      	movs	r3, #0
}
 8100634:	4618      	mov	r0, r3
 8100636:	3708      	adds	r7, #8
 8100638:	46bd      	mov	sp, r7
 810063a:	bd80      	pop	{r7, pc}
 810063c:	58024400 	.word	0x58024400
 8100640:	40024400 	.word	0x40024400
 8100644:	08102390 	.word	0x08102390
 8100648:	10000004 	.word	0x10000004
 810064c:	10000000 	.word	0x10000000

08100650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100650:	b580      	push	{r7, lr}
 8100652:	b082      	sub	sp, #8
 8100654:	af00      	add	r7, sp, #0
 8100656:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100658:	4b15      	ldr	r3, [pc, #84]	; (81006b0 <HAL_InitTick+0x60>)
 810065a:	781b      	ldrb	r3, [r3, #0]
 810065c:	2b00      	cmp	r3, #0
 810065e:	d101      	bne.n	8100664 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100660:	2301      	movs	r3, #1
 8100662:	e021      	b.n	81006a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100664:	4b13      	ldr	r3, [pc, #76]	; (81006b4 <HAL_InitTick+0x64>)
 8100666:	681a      	ldr	r2, [r3, #0]
 8100668:	4b11      	ldr	r3, [pc, #68]	; (81006b0 <HAL_InitTick+0x60>)
 810066a:	781b      	ldrb	r3, [r3, #0]
 810066c:	4619      	mov	r1, r3
 810066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100672:	fbb3 f3f1 	udiv	r3, r3, r1
 8100676:	fbb2 f3f3 	udiv	r3, r2, r3
 810067a:	4618      	mov	r0, r3
 810067c:	f000 f939 	bl	81008f2 <HAL_SYSTICK_Config>
 8100680:	4603      	mov	r3, r0
 8100682:	2b00      	cmp	r3, #0
 8100684:	d001      	beq.n	810068a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100686:	2301      	movs	r3, #1
 8100688:	e00e      	b.n	81006a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810068a:	687b      	ldr	r3, [r7, #4]
 810068c:	2b0f      	cmp	r3, #15
 810068e:	d80a      	bhi.n	81006a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100690:	2200      	movs	r2, #0
 8100692:	6879      	ldr	r1, [r7, #4]
 8100694:	f04f 30ff 	mov.w	r0, #4294967295
 8100698:	f000 f911 	bl	81008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810069c:	4a06      	ldr	r2, [pc, #24]	; (81006b8 <HAL_InitTick+0x68>)
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81006a2:	2300      	movs	r3, #0
 81006a4:	e000      	b.n	81006a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81006a6:	2301      	movs	r3, #1
}
 81006a8:	4618      	mov	r0, r3
 81006aa:	3708      	adds	r7, #8
 81006ac:	46bd      	mov	sp, r7
 81006ae:	bd80      	pop	{r7, pc}
 81006b0:	1000000c 	.word	0x1000000c
 81006b4:	10000000 	.word	0x10000000
 81006b8:	10000008 	.word	0x10000008

081006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006bc:	b480      	push	{r7}
 81006be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006c0:	4b06      	ldr	r3, [pc, #24]	; (81006dc <HAL_IncTick+0x20>)
 81006c2:	781b      	ldrb	r3, [r3, #0]
 81006c4:	461a      	mov	r2, r3
 81006c6:	4b06      	ldr	r3, [pc, #24]	; (81006e0 <HAL_IncTick+0x24>)
 81006c8:	681b      	ldr	r3, [r3, #0]
 81006ca:	4413      	add	r3, r2
 81006cc:	4a04      	ldr	r2, [pc, #16]	; (81006e0 <HAL_IncTick+0x24>)
 81006ce:	6013      	str	r3, [r2, #0]
}
 81006d0:	bf00      	nop
 81006d2:	46bd      	mov	sp, r7
 81006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d8:	4770      	bx	lr
 81006da:	bf00      	nop
 81006dc:	1000000c 	.word	0x1000000c
 81006e0:	1000023c 	.word	0x1000023c

081006e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81006e4:	b480      	push	{r7}
 81006e6:	af00      	add	r7, sp, #0
  return uwTick;
 81006e8:	4b03      	ldr	r3, [pc, #12]	; (81006f8 <HAL_GetTick+0x14>)
 81006ea:	681b      	ldr	r3, [r3, #0]
}
 81006ec:	4618      	mov	r0, r3
 81006ee:	46bd      	mov	sp, r7
 81006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f4:	4770      	bx	lr
 81006f6:	bf00      	nop
 81006f8:	1000023c 	.word	0x1000023c

081006fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b084      	sub	sp, #16
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100704:	f7ff ffee 	bl	81006e4 <HAL_GetTick>
 8100708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810070a:	687b      	ldr	r3, [r7, #4]
 810070c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810070e:	68fb      	ldr	r3, [r7, #12]
 8100710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100714:	d005      	beq.n	8100722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100716:	4b0a      	ldr	r3, [pc, #40]	; (8100740 <HAL_Delay+0x44>)
 8100718:	781b      	ldrb	r3, [r3, #0]
 810071a:	461a      	mov	r2, r3
 810071c:	68fb      	ldr	r3, [r7, #12]
 810071e:	4413      	add	r3, r2
 8100720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100722:	bf00      	nop
 8100724:	f7ff ffde 	bl	81006e4 <HAL_GetTick>
 8100728:	4602      	mov	r2, r0
 810072a:	68bb      	ldr	r3, [r7, #8]
 810072c:	1ad3      	subs	r3, r2, r3
 810072e:	68fa      	ldr	r2, [r7, #12]
 8100730:	429a      	cmp	r2, r3
 8100732:	d8f7      	bhi.n	8100724 <HAL_Delay+0x28>
  {
  }
}
 8100734:	bf00      	nop
 8100736:	bf00      	nop
 8100738:	3710      	adds	r7, #16
 810073a:	46bd      	mov	sp, r7
 810073c:	bd80      	pop	{r7, pc}
 810073e:	bf00      	nop
 8100740:	1000000c 	.word	0x1000000c

08100744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100744:	b480      	push	{r7}
 8100746:	b085      	sub	sp, #20
 8100748:	af00      	add	r7, sp, #0
 810074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810074c:	687b      	ldr	r3, [r7, #4]
 810074e:	f003 0307 	and.w	r3, r3, #7
 8100752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100754:	4b0c      	ldr	r3, [pc, #48]	; (8100788 <__NVIC_SetPriorityGrouping+0x44>)
 8100756:	68db      	ldr	r3, [r3, #12]
 8100758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810075a:	68ba      	ldr	r2, [r7, #8]
 810075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100760:	4013      	ands	r3, r2
 8100762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100764:	68fb      	ldr	r3, [r7, #12]
 8100766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100768:	68bb      	ldr	r3, [r7, #8]
 810076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100776:	4a04      	ldr	r2, [pc, #16]	; (8100788 <__NVIC_SetPriorityGrouping+0x44>)
 8100778:	68bb      	ldr	r3, [r7, #8]
 810077a:	60d3      	str	r3, [r2, #12]
}
 810077c:	bf00      	nop
 810077e:	3714      	adds	r7, #20
 8100780:	46bd      	mov	sp, r7
 8100782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100786:	4770      	bx	lr
 8100788:	e000ed00 	.word	0xe000ed00

0810078c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100790:	4b04      	ldr	r3, [pc, #16]	; (81007a4 <__NVIC_GetPriorityGrouping+0x18>)
 8100792:	68db      	ldr	r3, [r3, #12]
 8100794:	0a1b      	lsrs	r3, r3, #8
 8100796:	f003 0307 	and.w	r3, r3, #7
}
 810079a:	4618      	mov	r0, r3
 810079c:	46bd      	mov	sp, r7
 810079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a2:	4770      	bx	lr
 81007a4:	e000ed00 	.word	0xe000ed00

081007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81007a8:	b480      	push	{r7}
 81007aa:	b083      	sub	sp, #12
 81007ac:	af00      	add	r7, sp, #0
 81007ae:	4603      	mov	r3, r0
 81007b0:	6039      	str	r1, [r7, #0]
 81007b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007b8:	2b00      	cmp	r3, #0
 81007ba:	db0a      	blt.n	81007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007bc:	683b      	ldr	r3, [r7, #0]
 81007be:	b2da      	uxtb	r2, r3
 81007c0:	490c      	ldr	r1, [pc, #48]	; (81007f4 <__NVIC_SetPriority+0x4c>)
 81007c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007c6:	0112      	lsls	r2, r2, #4
 81007c8:	b2d2      	uxtb	r2, r2
 81007ca:	440b      	add	r3, r1
 81007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007d0:	e00a      	b.n	81007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007d2:	683b      	ldr	r3, [r7, #0]
 81007d4:	b2da      	uxtb	r2, r3
 81007d6:	4908      	ldr	r1, [pc, #32]	; (81007f8 <__NVIC_SetPriority+0x50>)
 81007d8:	88fb      	ldrh	r3, [r7, #6]
 81007da:	f003 030f 	and.w	r3, r3, #15
 81007de:	3b04      	subs	r3, #4
 81007e0:	0112      	lsls	r2, r2, #4
 81007e2:	b2d2      	uxtb	r2, r2
 81007e4:	440b      	add	r3, r1
 81007e6:	761a      	strb	r2, [r3, #24]
}
 81007e8:	bf00      	nop
 81007ea:	370c      	adds	r7, #12
 81007ec:	46bd      	mov	sp, r7
 81007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f2:	4770      	bx	lr
 81007f4:	e000e100 	.word	0xe000e100
 81007f8:	e000ed00 	.word	0xe000ed00

081007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007fc:	b480      	push	{r7}
 81007fe:	b089      	sub	sp, #36	; 0x24
 8100800:	af00      	add	r7, sp, #0
 8100802:	60f8      	str	r0, [r7, #12]
 8100804:	60b9      	str	r1, [r7, #8]
 8100806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100808:	68fb      	ldr	r3, [r7, #12]
 810080a:	f003 0307 	and.w	r3, r3, #7
 810080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100810:	69fb      	ldr	r3, [r7, #28]
 8100812:	f1c3 0307 	rsb	r3, r3, #7
 8100816:	2b04      	cmp	r3, #4
 8100818:	bf28      	it	cs
 810081a:	2304      	movcs	r3, #4
 810081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810081e:	69fb      	ldr	r3, [r7, #28]
 8100820:	3304      	adds	r3, #4
 8100822:	2b06      	cmp	r3, #6
 8100824:	d902      	bls.n	810082c <NVIC_EncodePriority+0x30>
 8100826:	69fb      	ldr	r3, [r7, #28]
 8100828:	3b03      	subs	r3, #3
 810082a:	e000      	b.n	810082e <NVIC_EncodePriority+0x32>
 810082c:	2300      	movs	r3, #0
 810082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100830:	f04f 32ff 	mov.w	r2, #4294967295
 8100834:	69bb      	ldr	r3, [r7, #24]
 8100836:	fa02 f303 	lsl.w	r3, r2, r3
 810083a:	43da      	mvns	r2, r3
 810083c:	68bb      	ldr	r3, [r7, #8]
 810083e:	401a      	ands	r2, r3
 8100840:	697b      	ldr	r3, [r7, #20]
 8100842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100844:	f04f 31ff 	mov.w	r1, #4294967295
 8100848:	697b      	ldr	r3, [r7, #20]
 810084a:	fa01 f303 	lsl.w	r3, r1, r3
 810084e:	43d9      	mvns	r1, r3
 8100850:	687b      	ldr	r3, [r7, #4]
 8100852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100854:	4313      	orrs	r3, r2
         );
}
 8100856:	4618      	mov	r0, r3
 8100858:	3724      	adds	r7, #36	; 0x24
 810085a:	46bd      	mov	sp, r7
 810085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100860:	4770      	bx	lr
	...

08100864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100864:	b580      	push	{r7, lr}
 8100866:	b082      	sub	sp, #8
 8100868:	af00      	add	r7, sp, #0
 810086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810086c:	687b      	ldr	r3, [r7, #4]
 810086e:	3b01      	subs	r3, #1
 8100870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100874:	d301      	bcc.n	810087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100876:	2301      	movs	r3, #1
 8100878:	e00f      	b.n	810089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810087a:	4a0a      	ldr	r2, [pc, #40]	; (81008a4 <SysTick_Config+0x40>)
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	3b01      	subs	r3, #1
 8100880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100882:	210f      	movs	r1, #15
 8100884:	f04f 30ff 	mov.w	r0, #4294967295
 8100888:	f7ff ff8e 	bl	81007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810088c:	4b05      	ldr	r3, [pc, #20]	; (81008a4 <SysTick_Config+0x40>)
 810088e:	2200      	movs	r2, #0
 8100890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100892:	4b04      	ldr	r3, [pc, #16]	; (81008a4 <SysTick_Config+0x40>)
 8100894:	2207      	movs	r2, #7
 8100896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100898:	2300      	movs	r3, #0
}
 810089a:	4618      	mov	r0, r3
 810089c:	3708      	adds	r7, #8
 810089e:	46bd      	mov	sp, r7
 81008a0:	bd80      	pop	{r7, pc}
 81008a2:	bf00      	nop
 81008a4:	e000e010 	.word	0xe000e010

081008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81008a8:	b580      	push	{r7, lr}
 81008aa:	b082      	sub	sp, #8
 81008ac:	af00      	add	r7, sp, #0
 81008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81008b0:	6878      	ldr	r0, [r7, #4]
 81008b2:	f7ff ff47 	bl	8100744 <__NVIC_SetPriorityGrouping>
}
 81008b6:	bf00      	nop
 81008b8:	3708      	adds	r7, #8
 81008ba:	46bd      	mov	sp, r7
 81008bc:	bd80      	pop	{r7, pc}

081008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008be:	b580      	push	{r7, lr}
 81008c0:	b086      	sub	sp, #24
 81008c2:	af00      	add	r7, sp, #0
 81008c4:	4603      	mov	r3, r0
 81008c6:	60b9      	str	r1, [r7, #8]
 81008c8:	607a      	str	r2, [r7, #4]
 81008ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81008cc:	f7ff ff5e 	bl	810078c <__NVIC_GetPriorityGrouping>
 81008d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81008d2:	687a      	ldr	r2, [r7, #4]
 81008d4:	68b9      	ldr	r1, [r7, #8]
 81008d6:	6978      	ldr	r0, [r7, #20]
 81008d8:	f7ff ff90 	bl	81007fc <NVIC_EncodePriority>
 81008dc:	4602      	mov	r2, r0
 81008de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81008e2:	4611      	mov	r1, r2
 81008e4:	4618      	mov	r0, r3
 81008e6:	f7ff ff5f 	bl	81007a8 <__NVIC_SetPriority>
}
 81008ea:	bf00      	nop
 81008ec:	3718      	adds	r7, #24
 81008ee:	46bd      	mov	sp, r7
 81008f0:	bd80      	pop	{r7, pc}

081008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81008f2:	b580      	push	{r7, lr}
 81008f4:	b082      	sub	sp, #8
 81008f6:	af00      	add	r7, sp, #0
 81008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81008fa:	6878      	ldr	r0, [r7, #4]
 81008fc:	f7ff ffb2 	bl	8100864 <SysTick_Config>
 8100900:	4603      	mov	r3, r0
}
 8100902:	4618      	mov	r0, r3
 8100904:	3708      	adds	r7, #8
 8100906:	46bd      	mov	sp, r7
 8100908:	bd80      	pop	{r7, pc}
	...

0810090c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100910:	4b07      	ldr	r3, [pc, #28]	; (8100930 <HAL_GetCurrentCPUID+0x24>)
 8100912:	681b      	ldr	r3, [r3, #0]
 8100914:	091b      	lsrs	r3, r3, #4
 8100916:	f003 030f 	and.w	r3, r3, #15
 810091a:	2b07      	cmp	r3, #7
 810091c:	d101      	bne.n	8100922 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810091e:	2303      	movs	r3, #3
 8100920:	e000      	b.n	8100924 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100922:	2301      	movs	r3, #1
  }
}
 8100924:	4618      	mov	r0, r3
 8100926:	46bd      	mov	sp, r7
 8100928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092c:	4770      	bx	lr
 810092e:	bf00      	nop
 8100930:	e000ed00 	.word	0xe000ed00

08100934 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8100934:	b580      	push	{r7, lr}
 8100936:	b086      	sub	sp, #24
 8100938:	af00      	add	r7, sp, #0
 810093a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 810093c:	f7ff fed2 	bl	81006e4 <HAL_GetTick>
 8100940:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100942:	687b      	ldr	r3, [r7, #4]
 8100944:	2b00      	cmp	r3, #0
 8100946:	d101      	bne.n	810094c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8100948:	2301      	movs	r3, #1
 810094a:	e2dc      	b.n	8100f06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 810094c:	687b      	ldr	r3, [r7, #4]
 810094e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8100952:	b2db      	uxtb	r3, r3
 8100954:	2b02      	cmp	r3, #2
 8100956:	d008      	beq.n	810096a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8100958:	687b      	ldr	r3, [r7, #4]
 810095a:	2280      	movs	r2, #128	; 0x80
 810095c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810095e:	687b      	ldr	r3, [r7, #4]
 8100960:	2200      	movs	r2, #0
 8100962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8100966:	2301      	movs	r3, #1
 8100968:	e2cd      	b.n	8100f06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810096a:	687b      	ldr	r3, [r7, #4]
 810096c:	681b      	ldr	r3, [r3, #0]
 810096e:	4a76      	ldr	r2, [pc, #472]	; (8100b48 <HAL_DMA_Abort+0x214>)
 8100970:	4293      	cmp	r3, r2
 8100972:	d04a      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 8100974:	687b      	ldr	r3, [r7, #4]
 8100976:	681b      	ldr	r3, [r3, #0]
 8100978:	4a74      	ldr	r2, [pc, #464]	; (8100b4c <HAL_DMA_Abort+0x218>)
 810097a:	4293      	cmp	r3, r2
 810097c:	d045      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 810097e:	687b      	ldr	r3, [r7, #4]
 8100980:	681b      	ldr	r3, [r3, #0]
 8100982:	4a73      	ldr	r2, [pc, #460]	; (8100b50 <HAL_DMA_Abort+0x21c>)
 8100984:	4293      	cmp	r3, r2
 8100986:	d040      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 8100988:	687b      	ldr	r3, [r7, #4]
 810098a:	681b      	ldr	r3, [r3, #0]
 810098c:	4a71      	ldr	r2, [pc, #452]	; (8100b54 <HAL_DMA_Abort+0x220>)
 810098e:	4293      	cmp	r3, r2
 8100990:	d03b      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 8100992:	687b      	ldr	r3, [r7, #4]
 8100994:	681b      	ldr	r3, [r3, #0]
 8100996:	4a70      	ldr	r2, [pc, #448]	; (8100b58 <HAL_DMA_Abort+0x224>)
 8100998:	4293      	cmp	r3, r2
 810099a:	d036      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 810099c:	687b      	ldr	r3, [r7, #4]
 810099e:	681b      	ldr	r3, [r3, #0]
 81009a0:	4a6e      	ldr	r2, [pc, #440]	; (8100b5c <HAL_DMA_Abort+0x228>)
 81009a2:	4293      	cmp	r3, r2
 81009a4:	d031      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009a6:	687b      	ldr	r3, [r7, #4]
 81009a8:	681b      	ldr	r3, [r3, #0]
 81009aa:	4a6d      	ldr	r2, [pc, #436]	; (8100b60 <HAL_DMA_Abort+0x22c>)
 81009ac:	4293      	cmp	r3, r2
 81009ae:	d02c      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009b0:	687b      	ldr	r3, [r7, #4]
 81009b2:	681b      	ldr	r3, [r3, #0]
 81009b4:	4a6b      	ldr	r2, [pc, #428]	; (8100b64 <HAL_DMA_Abort+0x230>)
 81009b6:	4293      	cmp	r3, r2
 81009b8:	d027      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009ba:	687b      	ldr	r3, [r7, #4]
 81009bc:	681b      	ldr	r3, [r3, #0]
 81009be:	4a6a      	ldr	r2, [pc, #424]	; (8100b68 <HAL_DMA_Abort+0x234>)
 81009c0:	4293      	cmp	r3, r2
 81009c2:	d022      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009c4:	687b      	ldr	r3, [r7, #4]
 81009c6:	681b      	ldr	r3, [r3, #0]
 81009c8:	4a68      	ldr	r2, [pc, #416]	; (8100b6c <HAL_DMA_Abort+0x238>)
 81009ca:	4293      	cmp	r3, r2
 81009cc:	d01d      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009ce:	687b      	ldr	r3, [r7, #4]
 81009d0:	681b      	ldr	r3, [r3, #0]
 81009d2:	4a67      	ldr	r2, [pc, #412]	; (8100b70 <HAL_DMA_Abort+0x23c>)
 81009d4:	4293      	cmp	r3, r2
 81009d6:	d018      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	681b      	ldr	r3, [r3, #0]
 81009dc:	4a65      	ldr	r2, [pc, #404]	; (8100b74 <HAL_DMA_Abort+0x240>)
 81009de:	4293      	cmp	r3, r2
 81009e0:	d013      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009e2:	687b      	ldr	r3, [r7, #4]
 81009e4:	681b      	ldr	r3, [r3, #0]
 81009e6:	4a64      	ldr	r2, [pc, #400]	; (8100b78 <HAL_DMA_Abort+0x244>)
 81009e8:	4293      	cmp	r3, r2
 81009ea:	d00e      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	681b      	ldr	r3, [r3, #0]
 81009f0:	4a62      	ldr	r2, [pc, #392]	; (8100b7c <HAL_DMA_Abort+0x248>)
 81009f2:	4293      	cmp	r3, r2
 81009f4:	d009      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 81009f6:	687b      	ldr	r3, [r7, #4]
 81009f8:	681b      	ldr	r3, [r3, #0]
 81009fa:	4a61      	ldr	r2, [pc, #388]	; (8100b80 <HAL_DMA_Abort+0x24c>)
 81009fc:	4293      	cmp	r3, r2
 81009fe:	d004      	beq.n	8100a0a <HAL_DMA_Abort+0xd6>
 8100a00:	687b      	ldr	r3, [r7, #4]
 8100a02:	681b      	ldr	r3, [r3, #0]
 8100a04:	4a5f      	ldr	r2, [pc, #380]	; (8100b84 <HAL_DMA_Abort+0x250>)
 8100a06:	4293      	cmp	r3, r2
 8100a08:	d101      	bne.n	8100a0e <HAL_DMA_Abort+0xda>
 8100a0a:	2301      	movs	r3, #1
 8100a0c:	e000      	b.n	8100a10 <HAL_DMA_Abort+0xdc>
 8100a0e:	2300      	movs	r3, #0
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	d013      	beq.n	8100a3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	681b      	ldr	r3, [r3, #0]
 8100a18:	681a      	ldr	r2, [r3, #0]
 8100a1a:	687b      	ldr	r3, [r7, #4]
 8100a1c:	681b      	ldr	r3, [r3, #0]
 8100a1e:	f022 021e 	bic.w	r2, r2, #30
 8100a22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8100a24:	687b      	ldr	r3, [r7, #4]
 8100a26:	681b      	ldr	r3, [r3, #0]
 8100a28:	695a      	ldr	r2, [r3, #20]
 8100a2a:	687b      	ldr	r3, [r7, #4]
 8100a2c:	681b      	ldr	r3, [r3, #0]
 8100a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8100a32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8100a34:	687b      	ldr	r3, [r7, #4]
 8100a36:	681b      	ldr	r3, [r3, #0]
 8100a38:	617b      	str	r3, [r7, #20]
 8100a3a:	e00a      	b.n	8100a52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8100a3c:	687b      	ldr	r3, [r7, #4]
 8100a3e:	681b      	ldr	r3, [r3, #0]
 8100a40:	681a      	ldr	r2, [r3, #0]
 8100a42:	687b      	ldr	r3, [r7, #4]
 8100a44:	681b      	ldr	r3, [r3, #0]
 8100a46:	f022 020e 	bic.w	r2, r2, #14
 8100a4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8100a4c:	687b      	ldr	r3, [r7, #4]
 8100a4e:	681b      	ldr	r3, [r3, #0]
 8100a50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100a52:	687b      	ldr	r3, [r7, #4]
 8100a54:	681b      	ldr	r3, [r3, #0]
 8100a56:	4a3c      	ldr	r2, [pc, #240]	; (8100b48 <HAL_DMA_Abort+0x214>)
 8100a58:	4293      	cmp	r3, r2
 8100a5a:	d072      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a5c:	687b      	ldr	r3, [r7, #4]
 8100a5e:	681b      	ldr	r3, [r3, #0]
 8100a60:	4a3a      	ldr	r2, [pc, #232]	; (8100b4c <HAL_DMA_Abort+0x218>)
 8100a62:	4293      	cmp	r3, r2
 8100a64:	d06d      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a66:	687b      	ldr	r3, [r7, #4]
 8100a68:	681b      	ldr	r3, [r3, #0]
 8100a6a:	4a39      	ldr	r2, [pc, #228]	; (8100b50 <HAL_DMA_Abort+0x21c>)
 8100a6c:	4293      	cmp	r3, r2
 8100a6e:	d068      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a70:	687b      	ldr	r3, [r7, #4]
 8100a72:	681b      	ldr	r3, [r3, #0]
 8100a74:	4a37      	ldr	r2, [pc, #220]	; (8100b54 <HAL_DMA_Abort+0x220>)
 8100a76:	4293      	cmp	r3, r2
 8100a78:	d063      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	681b      	ldr	r3, [r3, #0]
 8100a7e:	4a36      	ldr	r2, [pc, #216]	; (8100b58 <HAL_DMA_Abort+0x224>)
 8100a80:	4293      	cmp	r3, r2
 8100a82:	d05e      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a84:	687b      	ldr	r3, [r7, #4]
 8100a86:	681b      	ldr	r3, [r3, #0]
 8100a88:	4a34      	ldr	r2, [pc, #208]	; (8100b5c <HAL_DMA_Abort+0x228>)
 8100a8a:	4293      	cmp	r3, r2
 8100a8c:	d059      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	681b      	ldr	r3, [r3, #0]
 8100a92:	4a33      	ldr	r2, [pc, #204]	; (8100b60 <HAL_DMA_Abort+0x22c>)
 8100a94:	4293      	cmp	r3, r2
 8100a96:	d054      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100a98:	687b      	ldr	r3, [r7, #4]
 8100a9a:	681b      	ldr	r3, [r3, #0]
 8100a9c:	4a31      	ldr	r2, [pc, #196]	; (8100b64 <HAL_DMA_Abort+0x230>)
 8100a9e:	4293      	cmp	r3, r2
 8100aa0:	d04f      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	681b      	ldr	r3, [r3, #0]
 8100aa6:	4a30      	ldr	r2, [pc, #192]	; (8100b68 <HAL_DMA_Abort+0x234>)
 8100aa8:	4293      	cmp	r3, r2
 8100aaa:	d04a      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100aac:	687b      	ldr	r3, [r7, #4]
 8100aae:	681b      	ldr	r3, [r3, #0]
 8100ab0:	4a2e      	ldr	r2, [pc, #184]	; (8100b6c <HAL_DMA_Abort+0x238>)
 8100ab2:	4293      	cmp	r3, r2
 8100ab4:	d045      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100ab6:	687b      	ldr	r3, [r7, #4]
 8100ab8:	681b      	ldr	r3, [r3, #0]
 8100aba:	4a2d      	ldr	r2, [pc, #180]	; (8100b70 <HAL_DMA_Abort+0x23c>)
 8100abc:	4293      	cmp	r3, r2
 8100abe:	d040      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100ac0:	687b      	ldr	r3, [r7, #4]
 8100ac2:	681b      	ldr	r3, [r3, #0]
 8100ac4:	4a2b      	ldr	r2, [pc, #172]	; (8100b74 <HAL_DMA_Abort+0x240>)
 8100ac6:	4293      	cmp	r3, r2
 8100ac8:	d03b      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	681b      	ldr	r3, [r3, #0]
 8100ace:	4a2a      	ldr	r2, [pc, #168]	; (8100b78 <HAL_DMA_Abort+0x244>)
 8100ad0:	4293      	cmp	r3, r2
 8100ad2:	d036      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100ad4:	687b      	ldr	r3, [r7, #4]
 8100ad6:	681b      	ldr	r3, [r3, #0]
 8100ad8:	4a28      	ldr	r2, [pc, #160]	; (8100b7c <HAL_DMA_Abort+0x248>)
 8100ada:	4293      	cmp	r3, r2
 8100adc:	d031      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100ade:	687b      	ldr	r3, [r7, #4]
 8100ae0:	681b      	ldr	r3, [r3, #0]
 8100ae2:	4a27      	ldr	r2, [pc, #156]	; (8100b80 <HAL_DMA_Abort+0x24c>)
 8100ae4:	4293      	cmp	r3, r2
 8100ae6:	d02c      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100ae8:	687b      	ldr	r3, [r7, #4]
 8100aea:	681b      	ldr	r3, [r3, #0]
 8100aec:	4a25      	ldr	r2, [pc, #148]	; (8100b84 <HAL_DMA_Abort+0x250>)
 8100aee:	4293      	cmp	r3, r2
 8100af0:	d027      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100af2:	687b      	ldr	r3, [r7, #4]
 8100af4:	681b      	ldr	r3, [r3, #0]
 8100af6:	4a24      	ldr	r2, [pc, #144]	; (8100b88 <HAL_DMA_Abort+0x254>)
 8100af8:	4293      	cmp	r3, r2
 8100afa:	d022      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100afc:	687b      	ldr	r3, [r7, #4]
 8100afe:	681b      	ldr	r3, [r3, #0]
 8100b00:	4a22      	ldr	r2, [pc, #136]	; (8100b8c <HAL_DMA_Abort+0x258>)
 8100b02:	4293      	cmp	r3, r2
 8100b04:	d01d      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b06:	687b      	ldr	r3, [r7, #4]
 8100b08:	681b      	ldr	r3, [r3, #0]
 8100b0a:	4a21      	ldr	r2, [pc, #132]	; (8100b90 <HAL_DMA_Abort+0x25c>)
 8100b0c:	4293      	cmp	r3, r2
 8100b0e:	d018      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b10:	687b      	ldr	r3, [r7, #4]
 8100b12:	681b      	ldr	r3, [r3, #0]
 8100b14:	4a1f      	ldr	r2, [pc, #124]	; (8100b94 <HAL_DMA_Abort+0x260>)
 8100b16:	4293      	cmp	r3, r2
 8100b18:	d013      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b1a:	687b      	ldr	r3, [r7, #4]
 8100b1c:	681b      	ldr	r3, [r3, #0]
 8100b1e:	4a1e      	ldr	r2, [pc, #120]	; (8100b98 <HAL_DMA_Abort+0x264>)
 8100b20:	4293      	cmp	r3, r2
 8100b22:	d00e      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	681b      	ldr	r3, [r3, #0]
 8100b28:	4a1c      	ldr	r2, [pc, #112]	; (8100b9c <HAL_DMA_Abort+0x268>)
 8100b2a:	4293      	cmp	r3, r2
 8100b2c:	d009      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	681b      	ldr	r3, [r3, #0]
 8100b32:	4a1b      	ldr	r2, [pc, #108]	; (8100ba0 <HAL_DMA_Abort+0x26c>)
 8100b34:	4293      	cmp	r3, r2
 8100b36:	d004      	beq.n	8100b42 <HAL_DMA_Abort+0x20e>
 8100b38:	687b      	ldr	r3, [r7, #4]
 8100b3a:	681b      	ldr	r3, [r3, #0]
 8100b3c:	4a19      	ldr	r2, [pc, #100]	; (8100ba4 <HAL_DMA_Abort+0x270>)
 8100b3e:	4293      	cmp	r3, r2
 8100b40:	d132      	bne.n	8100ba8 <HAL_DMA_Abort+0x274>
 8100b42:	2301      	movs	r3, #1
 8100b44:	e031      	b.n	8100baa <HAL_DMA_Abort+0x276>
 8100b46:	bf00      	nop
 8100b48:	40020010 	.word	0x40020010
 8100b4c:	40020028 	.word	0x40020028
 8100b50:	40020040 	.word	0x40020040
 8100b54:	40020058 	.word	0x40020058
 8100b58:	40020070 	.word	0x40020070
 8100b5c:	40020088 	.word	0x40020088
 8100b60:	400200a0 	.word	0x400200a0
 8100b64:	400200b8 	.word	0x400200b8
 8100b68:	40020410 	.word	0x40020410
 8100b6c:	40020428 	.word	0x40020428
 8100b70:	40020440 	.word	0x40020440
 8100b74:	40020458 	.word	0x40020458
 8100b78:	40020470 	.word	0x40020470
 8100b7c:	40020488 	.word	0x40020488
 8100b80:	400204a0 	.word	0x400204a0
 8100b84:	400204b8 	.word	0x400204b8
 8100b88:	58025408 	.word	0x58025408
 8100b8c:	5802541c 	.word	0x5802541c
 8100b90:	58025430 	.word	0x58025430
 8100b94:	58025444 	.word	0x58025444
 8100b98:	58025458 	.word	0x58025458
 8100b9c:	5802546c 	.word	0x5802546c
 8100ba0:	58025480 	.word	0x58025480
 8100ba4:	58025494 	.word	0x58025494
 8100ba8:	2300      	movs	r3, #0
 8100baa:	2b00      	cmp	r3, #0
 8100bac:	d007      	beq.n	8100bbe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8100bae:	687b      	ldr	r3, [r7, #4]
 8100bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100bb2:	681a      	ldr	r2, [r3, #0]
 8100bb4:	687b      	ldr	r3, [r7, #4]
 8100bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8100bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8100bbe:	687b      	ldr	r3, [r7, #4]
 8100bc0:	681b      	ldr	r3, [r3, #0]
 8100bc2:	4a6d      	ldr	r2, [pc, #436]	; (8100d78 <HAL_DMA_Abort+0x444>)
 8100bc4:	4293      	cmp	r3, r2
 8100bc6:	d04a      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100bc8:	687b      	ldr	r3, [r7, #4]
 8100bca:	681b      	ldr	r3, [r3, #0]
 8100bcc:	4a6b      	ldr	r2, [pc, #428]	; (8100d7c <HAL_DMA_Abort+0x448>)
 8100bce:	4293      	cmp	r3, r2
 8100bd0:	d045      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100bd2:	687b      	ldr	r3, [r7, #4]
 8100bd4:	681b      	ldr	r3, [r3, #0]
 8100bd6:	4a6a      	ldr	r2, [pc, #424]	; (8100d80 <HAL_DMA_Abort+0x44c>)
 8100bd8:	4293      	cmp	r3, r2
 8100bda:	d040      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100bdc:	687b      	ldr	r3, [r7, #4]
 8100bde:	681b      	ldr	r3, [r3, #0]
 8100be0:	4a68      	ldr	r2, [pc, #416]	; (8100d84 <HAL_DMA_Abort+0x450>)
 8100be2:	4293      	cmp	r3, r2
 8100be4:	d03b      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	681b      	ldr	r3, [r3, #0]
 8100bea:	4a67      	ldr	r2, [pc, #412]	; (8100d88 <HAL_DMA_Abort+0x454>)
 8100bec:	4293      	cmp	r3, r2
 8100bee:	d036      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	681b      	ldr	r3, [r3, #0]
 8100bf4:	4a65      	ldr	r2, [pc, #404]	; (8100d8c <HAL_DMA_Abort+0x458>)
 8100bf6:	4293      	cmp	r3, r2
 8100bf8:	d031      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100bfa:	687b      	ldr	r3, [r7, #4]
 8100bfc:	681b      	ldr	r3, [r3, #0]
 8100bfe:	4a64      	ldr	r2, [pc, #400]	; (8100d90 <HAL_DMA_Abort+0x45c>)
 8100c00:	4293      	cmp	r3, r2
 8100c02:	d02c      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c04:	687b      	ldr	r3, [r7, #4]
 8100c06:	681b      	ldr	r3, [r3, #0]
 8100c08:	4a62      	ldr	r2, [pc, #392]	; (8100d94 <HAL_DMA_Abort+0x460>)
 8100c0a:	4293      	cmp	r3, r2
 8100c0c:	d027      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c0e:	687b      	ldr	r3, [r7, #4]
 8100c10:	681b      	ldr	r3, [r3, #0]
 8100c12:	4a61      	ldr	r2, [pc, #388]	; (8100d98 <HAL_DMA_Abort+0x464>)
 8100c14:	4293      	cmp	r3, r2
 8100c16:	d022      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c18:	687b      	ldr	r3, [r7, #4]
 8100c1a:	681b      	ldr	r3, [r3, #0]
 8100c1c:	4a5f      	ldr	r2, [pc, #380]	; (8100d9c <HAL_DMA_Abort+0x468>)
 8100c1e:	4293      	cmp	r3, r2
 8100c20:	d01d      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c22:	687b      	ldr	r3, [r7, #4]
 8100c24:	681b      	ldr	r3, [r3, #0]
 8100c26:	4a5e      	ldr	r2, [pc, #376]	; (8100da0 <HAL_DMA_Abort+0x46c>)
 8100c28:	4293      	cmp	r3, r2
 8100c2a:	d018      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c2c:	687b      	ldr	r3, [r7, #4]
 8100c2e:	681b      	ldr	r3, [r3, #0]
 8100c30:	4a5c      	ldr	r2, [pc, #368]	; (8100da4 <HAL_DMA_Abort+0x470>)
 8100c32:	4293      	cmp	r3, r2
 8100c34:	d013      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c36:	687b      	ldr	r3, [r7, #4]
 8100c38:	681b      	ldr	r3, [r3, #0]
 8100c3a:	4a5b      	ldr	r2, [pc, #364]	; (8100da8 <HAL_DMA_Abort+0x474>)
 8100c3c:	4293      	cmp	r3, r2
 8100c3e:	d00e      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c40:	687b      	ldr	r3, [r7, #4]
 8100c42:	681b      	ldr	r3, [r3, #0]
 8100c44:	4a59      	ldr	r2, [pc, #356]	; (8100dac <HAL_DMA_Abort+0x478>)
 8100c46:	4293      	cmp	r3, r2
 8100c48:	d009      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c4a:	687b      	ldr	r3, [r7, #4]
 8100c4c:	681b      	ldr	r3, [r3, #0]
 8100c4e:	4a58      	ldr	r2, [pc, #352]	; (8100db0 <HAL_DMA_Abort+0x47c>)
 8100c50:	4293      	cmp	r3, r2
 8100c52:	d004      	beq.n	8100c5e <HAL_DMA_Abort+0x32a>
 8100c54:	687b      	ldr	r3, [r7, #4]
 8100c56:	681b      	ldr	r3, [r3, #0]
 8100c58:	4a56      	ldr	r2, [pc, #344]	; (8100db4 <HAL_DMA_Abort+0x480>)
 8100c5a:	4293      	cmp	r3, r2
 8100c5c:	d108      	bne.n	8100c70 <HAL_DMA_Abort+0x33c>
 8100c5e:	687b      	ldr	r3, [r7, #4]
 8100c60:	681b      	ldr	r3, [r3, #0]
 8100c62:	681a      	ldr	r2, [r3, #0]
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	681b      	ldr	r3, [r3, #0]
 8100c68:	f022 0201 	bic.w	r2, r2, #1
 8100c6c:	601a      	str	r2, [r3, #0]
 8100c6e:	e007      	b.n	8100c80 <HAL_DMA_Abort+0x34c>
 8100c70:	687b      	ldr	r3, [r7, #4]
 8100c72:	681b      	ldr	r3, [r3, #0]
 8100c74:	681a      	ldr	r2, [r3, #0]
 8100c76:	687b      	ldr	r3, [r7, #4]
 8100c78:	681b      	ldr	r3, [r3, #0]
 8100c7a:	f022 0201 	bic.w	r2, r2, #1
 8100c7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8100c80:	e013      	b.n	8100caa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8100c82:	f7ff fd2f 	bl	81006e4 <HAL_GetTick>
 8100c86:	4602      	mov	r2, r0
 8100c88:	693b      	ldr	r3, [r7, #16]
 8100c8a:	1ad3      	subs	r3, r2, r3
 8100c8c:	2b05      	cmp	r3, #5
 8100c8e:	d90c      	bls.n	8100caa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8100c90:	687b      	ldr	r3, [r7, #4]
 8100c92:	2220      	movs	r2, #32
 8100c94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	2203      	movs	r2, #3
 8100c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8100c9e:	687b      	ldr	r3, [r7, #4]
 8100ca0:	2200      	movs	r2, #0
 8100ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8100ca6:	2301      	movs	r3, #1
 8100ca8:	e12d      	b.n	8100f06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8100caa:	697b      	ldr	r3, [r7, #20]
 8100cac:	681b      	ldr	r3, [r3, #0]
 8100cae:	f003 0301 	and.w	r3, r3, #1
 8100cb2:	2b00      	cmp	r3, #0
 8100cb4:	d1e5      	bne.n	8100c82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100cb6:	687b      	ldr	r3, [r7, #4]
 8100cb8:	681b      	ldr	r3, [r3, #0]
 8100cba:	4a2f      	ldr	r2, [pc, #188]	; (8100d78 <HAL_DMA_Abort+0x444>)
 8100cbc:	4293      	cmp	r3, r2
 8100cbe:	d04a      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cc0:	687b      	ldr	r3, [r7, #4]
 8100cc2:	681b      	ldr	r3, [r3, #0]
 8100cc4:	4a2d      	ldr	r2, [pc, #180]	; (8100d7c <HAL_DMA_Abort+0x448>)
 8100cc6:	4293      	cmp	r3, r2
 8100cc8:	d045      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	681b      	ldr	r3, [r3, #0]
 8100cce:	4a2c      	ldr	r2, [pc, #176]	; (8100d80 <HAL_DMA_Abort+0x44c>)
 8100cd0:	4293      	cmp	r3, r2
 8100cd2:	d040      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cd4:	687b      	ldr	r3, [r7, #4]
 8100cd6:	681b      	ldr	r3, [r3, #0]
 8100cd8:	4a2a      	ldr	r2, [pc, #168]	; (8100d84 <HAL_DMA_Abort+0x450>)
 8100cda:	4293      	cmp	r3, r2
 8100cdc:	d03b      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	681b      	ldr	r3, [r3, #0]
 8100ce2:	4a29      	ldr	r2, [pc, #164]	; (8100d88 <HAL_DMA_Abort+0x454>)
 8100ce4:	4293      	cmp	r3, r2
 8100ce6:	d036      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100ce8:	687b      	ldr	r3, [r7, #4]
 8100cea:	681b      	ldr	r3, [r3, #0]
 8100cec:	4a27      	ldr	r2, [pc, #156]	; (8100d8c <HAL_DMA_Abort+0x458>)
 8100cee:	4293      	cmp	r3, r2
 8100cf0:	d031      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	681b      	ldr	r3, [r3, #0]
 8100cf6:	4a26      	ldr	r2, [pc, #152]	; (8100d90 <HAL_DMA_Abort+0x45c>)
 8100cf8:	4293      	cmp	r3, r2
 8100cfa:	d02c      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100cfc:	687b      	ldr	r3, [r7, #4]
 8100cfe:	681b      	ldr	r3, [r3, #0]
 8100d00:	4a24      	ldr	r2, [pc, #144]	; (8100d94 <HAL_DMA_Abort+0x460>)
 8100d02:	4293      	cmp	r3, r2
 8100d04:	d027      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d06:	687b      	ldr	r3, [r7, #4]
 8100d08:	681b      	ldr	r3, [r3, #0]
 8100d0a:	4a23      	ldr	r2, [pc, #140]	; (8100d98 <HAL_DMA_Abort+0x464>)
 8100d0c:	4293      	cmp	r3, r2
 8100d0e:	d022      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d10:	687b      	ldr	r3, [r7, #4]
 8100d12:	681b      	ldr	r3, [r3, #0]
 8100d14:	4a21      	ldr	r2, [pc, #132]	; (8100d9c <HAL_DMA_Abort+0x468>)
 8100d16:	4293      	cmp	r3, r2
 8100d18:	d01d      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d1a:	687b      	ldr	r3, [r7, #4]
 8100d1c:	681b      	ldr	r3, [r3, #0]
 8100d1e:	4a20      	ldr	r2, [pc, #128]	; (8100da0 <HAL_DMA_Abort+0x46c>)
 8100d20:	4293      	cmp	r3, r2
 8100d22:	d018      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d24:	687b      	ldr	r3, [r7, #4]
 8100d26:	681b      	ldr	r3, [r3, #0]
 8100d28:	4a1e      	ldr	r2, [pc, #120]	; (8100da4 <HAL_DMA_Abort+0x470>)
 8100d2a:	4293      	cmp	r3, r2
 8100d2c:	d013      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	681b      	ldr	r3, [r3, #0]
 8100d32:	4a1d      	ldr	r2, [pc, #116]	; (8100da8 <HAL_DMA_Abort+0x474>)
 8100d34:	4293      	cmp	r3, r2
 8100d36:	d00e      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	681b      	ldr	r3, [r3, #0]
 8100d3c:	4a1b      	ldr	r2, [pc, #108]	; (8100dac <HAL_DMA_Abort+0x478>)
 8100d3e:	4293      	cmp	r3, r2
 8100d40:	d009      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d42:	687b      	ldr	r3, [r7, #4]
 8100d44:	681b      	ldr	r3, [r3, #0]
 8100d46:	4a1a      	ldr	r2, [pc, #104]	; (8100db0 <HAL_DMA_Abort+0x47c>)
 8100d48:	4293      	cmp	r3, r2
 8100d4a:	d004      	beq.n	8100d56 <HAL_DMA_Abort+0x422>
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	681b      	ldr	r3, [r3, #0]
 8100d50:	4a18      	ldr	r2, [pc, #96]	; (8100db4 <HAL_DMA_Abort+0x480>)
 8100d52:	4293      	cmp	r3, r2
 8100d54:	d101      	bne.n	8100d5a <HAL_DMA_Abort+0x426>
 8100d56:	2301      	movs	r3, #1
 8100d58:	e000      	b.n	8100d5c <HAL_DMA_Abort+0x428>
 8100d5a:	2300      	movs	r3, #0
 8100d5c:	2b00      	cmp	r3, #0
 8100d5e:	d02b      	beq.n	8100db8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8100d60:	687b      	ldr	r3, [r7, #4]
 8100d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8100d64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8100d6a:	f003 031f 	and.w	r3, r3, #31
 8100d6e:	223f      	movs	r2, #63	; 0x3f
 8100d70:	409a      	lsls	r2, r3
 8100d72:	68bb      	ldr	r3, [r7, #8]
 8100d74:	609a      	str	r2, [r3, #8]
 8100d76:	e02a      	b.n	8100dce <HAL_DMA_Abort+0x49a>
 8100d78:	40020010 	.word	0x40020010
 8100d7c:	40020028 	.word	0x40020028
 8100d80:	40020040 	.word	0x40020040
 8100d84:	40020058 	.word	0x40020058
 8100d88:	40020070 	.word	0x40020070
 8100d8c:	40020088 	.word	0x40020088
 8100d90:	400200a0 	.word	0x400200a0
 8100d94:	400200b8 	.word	0x400200b8
 8100d98:	40020410 	.word	0x40020410
 8100d9c:	40020428 	.word	0x40020428
 8100da0:	40020440 	.word	0x40020440
 8100da4:	40020458 	.word	0x40020458
 8100da8:	40020470 	.word	0x40020470
 8100dac:	40020488 	.word	0x40020488
 8100db0:	400204a0 	.word	0x400204a0
 8100db4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8100db8:	687b      	ldr	r3, [r7, #4]
 8100dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8100dbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8100dc2:	f003 031f 	and.w	r3, r3, #31
 8100dc6:	2201      	movs	r2, #1
 8100dc8:	409a      	lsls	r2, r3
 8100dca:	68fb      	ldr	r3, [r7, #12]
 8100dcc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	681b      	ldr	r3, [r3, #0]
 8100dd2:	4a4f      	ldr	r2, [pc, #316]	; (8100f10 <HAL_DMA_Abort+0x5dc>)
 8100dd4:	4293      	cmp	r3, r2
 8100dd6:	d072      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	681b      	ldr	r3, [r3, #0]
 8100ddc:	4a4d      	ldr	r2, [pc, #308]	; (8100f14 <HAL_DMA_Abort+0x5e0>)
 8100dde:	4293      	cmp	r3, r2
 8100de0:	d06d      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	681b      	ldr	r3, [r3, #0]
 8100de6:	4a4c      	ldr	r2, [pc, #304]	; (8100f18 <HAL_DMA_Abort+0x5e4>)
 8100de8:	4293      	cmp	r3, r2
 8100dea:	d068      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	681b      	ldr	r3, [r3, #0]
 8100df0:	4a4a      	ldr	r2, [pc, #296]	; (8100f1c <HAL_DMA_Abort+0x5e8>)
 8100df2:	4293      	cmp	r3, r2
 8100df4:	d063      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100df6:	687b      	ldr	r3, [r7, #4]
 8100df8:	681b      	ldr	r3, [r3, #0]
 8100dfa:	4a49      	ldr	r2, [pc, #292]	; (8100f20 <HAL_DMA_Abort+0x5ec>)
 8100dfc:	4293      	cmp	r3, r2
 8100dfe:	d05e      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	681b      	ldr	r3, [r3, #0]
 8100e04:	4a47      	ldr	r2, [pc, #284]	; (8100f24 <HAL_DMA_Abort+0x5f0>)
 8100e06:	4293      	cmp	r3, r2
 8100e08:	d059      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	4a46      	ldr	r2, [pc, #280]	; (8100f28 <HAL_DMA_Abort+0x5f4>)
 8100e10:	4293      	cmp	r3, r2
 8100e12:	d054      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	681b      	ldr	r3, [r3, #0]
 8100e18:	4a44      	ldr	r2, [pc, #272]	; (8100f2c <HAL_DMA_Abort+0x5f8>)
 8100e1a:	4293      	cmp	r3, r2
 8100e1c:	d04f      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e1e:	687b      	ldr	r3, [r7, #4]
 8100e20:	681b      	ldr	r3, [r3, #0]
 8100e22:	4a43      	ldr	r2, [pc, #268]	; (8100f30 <HAL_DMA_Abort+0x5fc>)
 8100e24:	4293      	cmp	r3, r2
 8100e26:	d04a      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	4a41      	ldr	r2, [pc, #260]	; (8100f34 <HAL_DMA_Abort+0x600>)
 8100e2e:	4293      	cmp	r3, r2
 8100e30:	d045      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4a40      	ldr	r2, [pc, #256]	; (8100f38 <HAL_DMA_Abort+0x604>)
 8100e38:	4293      	cmp	r3, r2
 8100e3a:	d040      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	681b      	ldr	r3, [r3, #0]
 8100e40:	4a3e      	ldr	r2, [pc, #248]	; (8100f3c <HAL_DMA_Abort+0x608>)
 8100e42:	4293      	cmp	r3, r2
 8100e44:	d03b      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e46:	687b      	ldr	r3, [r7, #4]
 8100e48:	681b      	ldr	r3, [r3, #0]
 8100e4a:	4a3d      	ldr	r2, [pc, #244]	; (8100f40 <HAL_DMA_Abort+0x60c>)
 8100e4c:	4293      	cmp	r3, r2
 8100e4e:	d036      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	681b      	ldr	r3, [r3, #0]
 8100e54:	4a3b      	ldr	r2, [pc, #236]	; (8100f44 <HAL_DMA_Abort+0x610>)
 8100e56:	4293      	cmp	r3, r2
 8100e58:	d031      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	681b      	ldr	r3, [r3, #0]
 8100e5e:	4a3a      	ldr	r2, [pc, #232]	; (8100f48 <HAL_DMA_Abort+0x614>)
 8100e60:	4293      	cmp	r3, r2
 8100e62:	d02c      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e64:	687b      	ldr	r3, [r7, #4]
 8100e66:	681b      	ldr	r3, [r3, #0]
 8100e68:	4a38      	ldr	r2, [pc, #224]	; (8100f4c <HAL_DMA_Abort+0x618>)
 8100e6a:	4293      	cmp	r3, r2
 8100e6c:	d027      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e6e:	687b      	ldr	r3, [r7, #4]
 8100e70:	681b      	ldr	r3, [r3, #0]
 8100e72:	4a37      	ldr	r2, [pc, #220]	; (8100f50 <HAL_DMA_Abort+0x61c>)
 8100e74:	4293      	cmp	r3, r2
 8100e76:	d022      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	681b      	ldr	r3, [r3, #0]
 8100e7c:	4a35      	ldr	r2, [pc, #212]	; (8100f54 <HAL_DMA_Abort+0x620>)
 8100e7e:	4293      	cmp	r3, r2
 8100e80:	d01d      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e82:	687b      	ldr	r3, [r7, #4]
 8100e84:	681b      	ldr	r3, [r3, #0]
 8100e86:	4a34      	ldr	r2, [pc, #208]	; (8100f58 <HAL_DMA_Abort+0x624>)
 8100e88:	4293      	cmp	r3, r2
 8100e8a:	d018      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e8c:	687b      	ldr	r3, [r7, #4]
 8100e8e:	681b      	ldr	r3, [r3, #0]
 8100e90:	4a32      	ldr	r2, [pc, #200]	; (8100f5c <HAL_DMA_Abort+0x628>)
 8100e92:	4293      	cmp	r3, r2
 8100e94:	d013      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100e96:	687b      	ldr	r3, [r7, #4]
 8100e98:	681b      	ldr	r3, [r3, #0]
 8100e9a:	4a31      	ldr	r2, [pc, #196]	; (8100f60 <HAL_DMA_Abort+0x62c>)
 8100e9c:	4293      	cmp	r3, r2
 8100e9e:	d00e      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	681b      	ldr	r3, [r3, #0]
 8100ea4:	4a2f      	ldr	r2, [pc, #188]	; (8100f64 <HAL_DMA_Abort+0x630>)
 8100ea6:	4293      	cmp	r3, r2
 8100ea8:	d009      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	681b      	ldr	r3, [r3, #0]
 8100eae:	4a2e      	ldr	r2, [pc, #184]	; (8100f68 <HAL_DMA_Abort+0x634>)
 8100eb0:	4293      	cmp	r3, r2
 8100eb2:	d004      	beq.n	8100ebe <HAL_DMA_Abort+0x58a>
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	681b      	ldr	r3, [r3, #0]
 8100eb8:	4a2c      	ldr	r2, [pc, #176]	; (8100f6c <HAL_DMA_Abort+0x638>)
 8100eba:	4293      	cmp	r3, r2
 8100ebc:	d101      	bne.n	8100ec2 <HAL_DMA_Abort+0x58e>
 8100ebe:	2301      	movs	r3, #1
 8100ec0:	e000      	b.n	8100ec4 <HAL_DMA_Abort+0x590>
 8100ec2:	2300      	movs	r3, #0
 8100ec4:	2b00      	cmp	r3, #0
 8100ec6:	d015      	beq.n	8100ef4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8100ec8:	687b      	ldr	r3, [r7, #4]
 8100eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8100ecc:	687a      	ldr	r2, [r7, #4]
 8100ece:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8100ed0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8100ed6:	2b00      	cmp	r3, #0
 8100ed8:	d00c      	beq.n	8100ef4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8100ede:	681a      	ldr	r2, [r3, #0]
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8100ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8100ee8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100eee:	687a      	ldr	r2, [r7, #4]
 8100ef0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8100ef2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8100ef4:	687b      	ldr	r3, [r7, #4]
 8100ef6:	2201      	movs	r2, #1
 8100ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	2200      	movs	r2, #0
 8100f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8100f04:	2300      	movs	r3, #0
}
 8100f06:	4618      	mov	r0, r3
 8100f08:	3718      	adds	r7, #24
 8100f0a:	46bd      	mov	sp, r7
 8100f0c:	bd80      	pop	{r7, pc}
 8100f0e:	bf00      	nop
 8100f10:	40020010 	.word	0x40020010
 8100f14:	40020028 	.word	0x40020028
 8100f18:	40020040 	.word	0x40020040
 8100f1c:	40020058 	.word	0x40020058
 8100f20:	40020070 	.word	0x40020070
 8100f24:	40020088 	.word	0x40020088
 8100f28:	400200a0 	.word	0x400200a0
 8100f2c:	400200b8 	.word	0x400200b8
 8100f30:	40020410 	.word	0x40020410
 8100f34:	40020428 	.word	0x40020428
 8100f38:	40020440 	.word	0x40020440
 8100f3c:	40020458 	.word	0x40020458
 8100f40:	40020470 	.word	0x40020470
 8100f44:	40020488 	.word	0x40020488
 8100f48:	400204a0 	.word	0x400204a0
 8100f4c:	400204b8 	.word	0x400204b8
 8100f50:	58025408 	.word	0x58025408
 8100f54:	5802541c 	.word	0x5802541c
 8100f58:	58025430 	.word	0x58025430
 8100f5c:	58025444 	.word	0x58025444
 8100f60:	58025458 	.word	0x58025458
 8100f64:	5802546c 	.word	0x5802546c
 8100f68:	58025480 	.word	0x58025480
 8100f6c:	58025494 	.word	0x58025494

08100f70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8100f70:	b580      	push	{r7, lr}
 8100f72:	b084      	sub	sp, #16
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	2b00      	cmp	r3, #0
 8100f7c:	d101      	bne.n	8100f82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8100f7e:	2301      	movs	r3, #1
 8100f80:	e237      	b.n	81013f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8100f88:	b2db      	uxtb	r3, r3
 8100f8a:	2b02      	cmp	r3, #2
 8100f8c:	d004      	beq.n	8100f98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	2280      	movs	r2, #128	; 0x80
 8100f92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8100f94:	2301      	movs	r3, #1
 8100f96:	e22c      	b.n	81013f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	681b      	ldr	r3, [r3, #0]
 8100f9c:	4a5c      	ldr	r2, [pc, #368]	; (8101110 <HAL_DMA_Abort_IT+0x1a0>)
 8100f9e:	4293      	cmp	r3, r2
 8100fa0:	d04a      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	4a5b      	ldr	r2, [pc, #364]	; (8101114 <HAL_DMA_Abort_IT+0x1a4>)
 8100fa8:	4293      	cmp	r3, r2
 8100faa:	d045      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	681b      	ldr	r3, [r3, #0]
 8100fb0:	4a59      	ldr	r2, [pc, #356]	; (8101118 <HAL_DMA_Abort_IT+0x1a8>)
 8100fb2:	4293      	cmp	r3, r2
 8100fb4:	d040      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	681b      	ldr	r3, [r3, #0]
 8100fba:	4a58      	ldr	r2, [pc, #352]	; (810111c <HAL_DMA_Abort_IT+0x1ac>)
 8100fbc:	4293      	cmp	r3, r2
 8100fbe:	d03b      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	4a56      	ldr	r2, [pc, #344]	; (8101120 <HAL_DMA_Abort_IT+0x1b0>)
 8100fc6:	4293      	cmp	r3, r2
 8100fc8:	d036      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4a55      	ldr	r2, [pc, #340]	; (8101124 <HAL_DMA_Abort_IT+0x1b4>)
 8100fd0:	4293      	cmp	r3, r2
 8100fd2:	d031      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fd4:	687b      	ldr	r3, [r7, #4]
 8100fd6:	681b      	ldr	r3, [r3, #0]
 8100fd8:	4a53      	ldr	r2, [pc, #332]	; (8101128 <HAL_DMA_Abort_IT+0x1b8>)
 8100fda:	4293      	cmp	r3, r2
 8100fdc:	d02c      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	681b      	ldr	r3, [r3, #0]
 8100fe2:	4a52      	ldr	r2, [pc, #328]	; (810112c <HAL_DMA_Abort_IT+0x1bc>)
 8100fe4:	4293      	cmp	r3, r2
 8100fe6:	d027      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	4a50      	ldr	r2, [pc, #320]	; (8101130 <HAL_DMA_Abort_IT+0x1c0>)
 8100fee:	4293      	cmp	r3, r2
 8100ff0:	d022      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	681b      	ldr	r3, [r3, #0]
 8100ff6:	4a4f      	ldr	r2, [pc, #316]	; (8101134 <HAL_DMA_Abort_IT+0x1c4>)
 8100ff8:	4293      	cmp	r3, r2
 8100ffa:	d01d      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8100ffc:	687b      	ldr	r3, [r7, #4]
 8100ffe:	681b      	ldr	r3, [r3, #0]
 8101000:	4a4d      	ldr	r2, [pc, #308]	; (8101138 <HAL_DMA_Abort_IT+0x1c8>)
 8101002:	4293      	cmp	r3, r2
 8101004:	d018      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	681b      	ldr	r3, [r3, #0]
 810100a:	4a4c      	ldr	r2, [pc, #304]	; (810113c <HAL_DMA_Abort_IT+0x1cc>)
 810100c:	4293      	cmp	r3, r2
 810100e:	d013      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8101010:	687b      	ldr	r3, [r7, #4]
 8101012:	681b      	ldr	r3, [r3, #0]
 8101014:	4a4a      	ldr	r2, [pc, #296]	; (8101140 <HAL_DMA_Abort_IT+0x1d0>)
 8101016:	4293      	cmp	r3, r2
 8101018:	d00e      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 810101a:	687b      	ldr	r3, [r7, #4]
 810101c:	681b      	ldr	r3, [r3, #0]
 810101e:	4a49      	ldr	r2, [pc, #292]	; (8101144 <HAL_DMA_Abort_IT+0x1d4>)
 8101020:	4293      	cmp	r3, r2
 8101022:	d009      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 8101024:	687b      	ldr	r3, [r7, #4]
 8101026:	681b      	ldr	r3, [r3, #0]
 8101028:	4a47      	ldr	r2, [pc, #284]	; (8101148 <HAL_DMA_Abort_IT+0x1d8>)
 810102a:	4293      	cmp	r3, r2
 810102c:	d004      	beq.n	8101038 <HAL_DMA_Abort_IT+0xc8>
 810102e:	687b      	ldr	r3, [r7, #4]
 8101030:	681b      	ldr	r3, [r3, #0]
 8101032:	4a46      	ldr	r2, [pc, #280]	; (810114c <HAL_DMA_Abort_IT+0x1dc>)
 8101034:	4293      	cmp	r3, r2
 8101036:	d101      	bne.n	810103c <HAL_DMA_Abort_IT+0xcc>
 8101038:	2301      	movs	r3, #1
 810103a:	e000      	b.n	810103e <HAL_DMA_Abort_IT+0xce>
 810103c:	2300      	movs	r3, #0
 810103e:	2b00      	cmp	r3, #0
 8101040:	f000 8086 	beq.w	8101150 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	2204      	movs	r2, #4
 8101048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	681b      	ldr	r3, [r3, #0]
 8101050:	4a2f      	ldr	r2, [pc, #188]	; (8101110 <HAL_DMA_Abort_IT+0x1a0>)
 8101052:	4293      	cmp	r3, r2
 8101054:	d04a      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 8101056:	687b      	ldr	r3, [r7, #4]
 8101058:	681b      	ldr	r3, [r3, #0]
 810105a:	4a2e      	ldr	r2, [pc, #184]	; (8101114 <HAL_DMA_Abort_IT+0x1a4>)
 810105c:	4293      	cmp	r3, r2
 810105e:	d045      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	4a2c      	ldr	r2, [pc, #176]	; (8101118 <HAL_DMA_Abort_IT+0x1a8>)
 8101066:	4293      	cmp	r3, r2
 8101068:	d040      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 810106a:	687b      	ldr	r3, [r7, #4]
 810106c:	681b      	ldr	r3, [r3, #0]
 810106e:	4a2b      	ldr	r2, [pc, #172]	; (810111c <HAL_DMA_Abort_IT+0x1ac>)
 8101070:	4293      	cmp	r3, r2
 8101072:	d03b      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 8101074:	687b      	ldr	r3, [r7, #4]
 8101076:	681b      	ldr	r3, [r3, #0]
 8101078:	4a29      	ldr	r2, [pc, #164]	; (8101120 <HAL_DMA_Abort_IT+0x1b0>)
 810107a:	4293      	cmp	r3, r2
 810107c:	d036      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	681b      	ldr	r3, [r3, #0]
 8101082:	4a28      	ldr	r2, [pc, #160]	; (8101124 <HAL_DMA_Abort_IT+0x1b4>)
 8101084:	4293      	cmp	r3, r2
 8101086:	d031      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 8101088:	687b      	ldr	r3, [r7, #4]
 810108a:	681b      	ldr	r3, [r3, #0]
 810108c:	4a26      	ldr	r2, [pc, #152]	; (8101128 <HAL_DMA_Abort_IT+0x1b8>)
 810108e:	4293      	cmp	r3, r2
 8101090:	d02c      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	681b      	ldr	r3, [r3, #0]
 8101096:	4a25      	ldr	r2, [pc, #148]	; (810112c <HAL_DMA_Abort_IT+0x1bc>)
 8101098:	4293      	cmp	r3, r2
 810109a:	d027      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	4a23      	ldr	r2, [pc, #140]	; (8101130 <HAL_DMA_Abort_IT+0x1c0>)
 81010a2:	4293      	cmp	r3, r2
 81010a4:	d022      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	4a22      	ldr	r2, [pc, #136]	; (8101134 <HAL_DMA_Abort_IT+0x1c4>)
 81010ac:	4293      	cmp	r3, r2
 81010ae:	d01d      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	681b      	ldr	r3, [r3, #0]
 81010b4:	4a20      	ldr	r2, [pc, #128]	; (8101138 <HAL_DMA_Abort_IT+0x1c8>)
 81010b6:	4293      	cmp	r3, r2
 81010b8:	d018      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	4a1f      	ldr	r2, [pc, #124]	; (810113c <HAL_DMA_Abort_IT+0x1cc>)
 81010c0:	4293      	cmp	r3, r2
 81010c2:	d013      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010c4:	687b      	ldr	r3, [r7, #4]
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	4a1d      	ldr	r2, [pc, #116]	; (8101140 <HAL_DMA_Abort_IT+0x1d0>)
 81010ca:	4293      	cmp	r3, r2
 81010cc:	d00e      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	681b      	ldr	r3, [r3, #0]
 81010d2:	4a1c      	ldr	r2, [pc, #112]	; (8101144 <HAL_DMA_Abort_IT+0x1d4>)
 81010d4:	4293      	cmp	r3, r2
 81010d6:	d009      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	4a1a      	ldr	r2, [pc, #104]	; (8101148 <HAL_DMA_Abort_IT+0x1d8>)
 81010de:	4293      	cmp	r3, r2
 81010e0:	d004      	beq.n	81010ec <HAL_DMA_Abort_IT+0x17c>
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	681b      	ldr	r3, [r3, #0]
 81010e6:	4a19      	ldr	r2, [pc, #100]	; (810114c <HAL_DMA_Abort_IT+0x1dc>)
 81010e8:	4293      	cmp	r3, r2
 81010ea:	d108      	bne.n	81010fe <HAL_DMA_Abort_IT+0x18e>
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	681b      	ldr	r3, [r3, #0]
 81010f0:	681a      	ldr	r2, [r3, #0]
 81010f2:	687b      	ldr	r3, [r7, #4]
 81010f4:	681b      	ldr	r3, [r3, #0]
 81010f6:	f022 0201 	bic.w	r2, r2, #1
 81010fa:	601a      	str	r2, [r3, #0]
 81010fc:	e178      	b.n	81013f0 <HAL_DMA_Abort_IT+0x480>
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	681b      	ldr	r3, [r3, #0]
 8101102:	681a      	ldr	r2, [r3, #0]
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	f022 0201 	bic.w	r2, r2, #1
 810110c:	601a      	str	r2, [r3, #0]
 810110e:	e16f      	b.n	81013f0 <HAL_DMA_Abort_IT+0x480>
 8101110:	40020010 	.word	0x40020010
 8101114:	40020028 	.word	0x40020028
 8101118:	40020040 	.word	0x40020040
 810111c:	40020058 	.word	0x40020058
 8101120:	40020070 	.word	0x40020070
 8101124:	40020088 	.word	0x40020088
 8101128:	400200a0 	.word	0x400200a0
 810112c:	400200b8 	.word	0x400200b8
 8101130:	40020410 	.word	0x40020410
 8101134:	40020428 	.word	0x40020428
 8101138:	40020440 	.word	0x40020440
 810113c:	40020458 	.word	0x40020458
 8101140:	40020470 	.word	0x40020470
 8101144:	40020488 	.word	0x40020488
 8101148:	400204a0 	.word	0x400204a0
 810114c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	681b      	ldr	r3, [r3, #0]
 8101154:	681a      	ldr	r2, [r3, #0]
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	681b      	ldr	r3, [r3, #0]
 810115a:	f022 020e 	bic.w	r2, r2, #14
 810115e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	681b      	ldr	r3, [r3, #0]
 8101164:	4a6c      	ldr	r2, [pc, #432]	; (8101318 <HAL_DMA_Abort_IT+0x3a8>)
 8101166:	4293      	cmp	r3, r2
 8101168:	d04a      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	681b      	ldr	r3, [r3, #0]
 810116e:	4a6b      	ldr	r2, [pc, #428]	; (810131c <HAL_DMA_Abort_IT+0x3ac>)
 8101170:	4293      	cmp	r3, r2
 8101172:	d045      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	681b      	ldr	r3, [r3, #0]
 8101178:	4a69      	ldr	r2, [pc, #420]	; (8101320 <HAL_DMA_Abort_IT+0x3b0>)
 810117a:	4293      	cmp	r3, r2
 810117c:	d040      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	681b      	ldr	r3, [r3, #0]
 8101182:	4a68      	ldr	r2, [pc, #416]	; (8101324 <HAL_DMA_Abort_IT+0x3b4>)
 8101184:	4293      	cmp	r3, r2
 8101186:	d03b      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 8101188:	687b      	ldr	r3, [r7, #4]
 810118a:	681b      	ldr	r3, [r3, #0]
 810118c:	4a66      	ldr	r2, [pc, #408]	; (8101328 <HAL_DMA_Abort_IT+0x3b8>)
 810118e:	4293      	cmp	r3, r2
 8101190:	d036      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 8101192:	687b      	ldr	r3, [r7, #4]
 8101194:	681b      	ldr	r3, [r3, #0]
 8101196:	4a65      	ldr	r2, [pc, #404]	; (810132c <HAL_DMA_Abort_IT+0x3bc>)
 8101198:	4293      	cmp	r3, r2
 810119a:	d031      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	681b      	ldr	r3, [r3, #0]
 81011a0:	4a63      	ldr	r2, [pc, #396]	; (8101330 <HAL_DMA_Abort_IT+0x3c0>)
 81011a2:	4293      	cmp	r3, r2
 81011a4:	d02c      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	4a62      	ldr	r2, [pc, #392]	; (8101334 <HAL_DMA_Abort_IT+0x3c4>)
 81011ac:	4293      	cmp	r3, r2
 81011ae:	d027      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	681b      	ldr	r3, [r3, #0]
 81011b4:	4a60      	ldr	r2, [pc, #384]	; (8101338 <HAL_DMA_Abort_IT+0x3c8>)
 81011b6:	4293      	cmp	r3, r2
 81011b8:	d022      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011ba:	687b      	ldr	r3, [r7, #4]
 81011bc:	681b      	ldr	r3, [r3, #0]
 81011be:	4a5f      	ldr	r2, [pc, #380]	; (810133c <HAL_DMA_Abort_IT+0x3cc>)
 81011c0:	4293      	cmp	r3, r2
 81011c2:	d01d      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	681b      	ldr	r3, [r3, #0]
 81011c8:	4a5d      	ldr	r2, [pc, #372]	; (8101340 <HAL_DMA_Abort_IT+0x3d0>)
 81011ca:	4293      	cmp	r3, r2
 81011cc:	d018      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011ce:	687b      	ldr	r3, [r7, #4]
 81011d0:	681b      	ldr	r3, [r3, #0]
 81011d2:	4a5c      	ldr	r2, [pc, #368]	; (8101344 <HAL_DMA_Abort_IT+0x3d4>)
 81011d4:	4293      	cmp	r3, r2
 81011d6:	d013      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	681b      	ldr	r3, [r3, #0]
 81011dc:	4a5a      	ldr	r2, [pc, #360]	; (8101348 <HAL_DMA_Abort_IT+0x3d8>)
 81011de:	4293      	cmp	r3, r2
 81011e0:	d00e      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	681b      	ldr	r3, [r3, #0]
 81011e6:	4a59      	ldr	r2, [pc, #356]	; (810134c <HAL_DMA_Abort_IT+0x3dc>)
 81011e8:	4293      	cmp	r3, r2
 81011ea:	d009      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	681b      	ldr	r3, [r3, #0]
 81011f0:	4a57      	ldr	r2, [pc, #348]	; (8101350 <HAL_DMA_Abort_IT+0x3e0>)
 81011f2:	4293      	cmp	r3, r2
 81011f4:	d004      	beq.n	8101200 <HAL_DMA_Abort_IT+0x290>
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	681b      	ldr	r3, [r3, #0]
 81011fa:	4a56      	ldr	r2, [pc, #344]	; (8101354 <HAL_DMA_Abort_IT+0x3e4>)
 81011fc:	4293      	cmp	r3, r2
 81011fe:	d108      	bne.n	8101212 <HAL_DMA_Abort_IT+0x2a2>
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	681b      	ldr	r3, [r3, #0]
 8101204:	681a      	ldr	r2, [r3, #0]
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	681b      	ldr	r3, [r3, #0]
 810120a:	f022 0201 	bic.w	r2, r2, #1
 810120e:	601a      	str	r2, [r3, #0]
 8101210:	e007      	b.n	8101222 <HAL_DMA_Abort_IT+0x2b2>
 8101212:	687b      	ldr	r3, [r7, #4]
 8101214:	681b      	ldr	r3, [r3, #0]
 8101216:	681a      	ldr	r2, [r3, #0]
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	681b      	ldr	r3, [r3, #0]
 810121c:	f022 0201 	bic.w	r2, r2, #1
 8101220:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	4a3c      	ldr	r2, [pc, #240]	; (8101318 <HAL_DMA_Abort_IT+0x3a8>)
 8101228:	4293      	cmp	r3, r2
 810122a:	d072      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	4a3a      	ldr	r2, [pc, #232]	; (810131c <HAL_DMA_Abort_IT+0x3ac>)
 8101232:	4293      	cmp	r3, r2
 8101234:	d06d      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	681b      	ldr	r3, [r3, #0]
 810123a:	4a39      	ldr	r2, [pc, #228]	; (8101320 <HAL_DMA_Abort_IT+0x3b0>)
 810123c:	4293      	cmp	r3, r2
 810123e:	d068      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	681b      	ldr	r3, [r3, #0]
 8101244:	4a37      	ldr	r2, [pc, #220]	; (8101324 <HAL_DMA_Abort_IT+0x3b4>)
 8101246:	4293      	cmp	r3, r2
 8101248:	d063      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	681b      	ldr	r3, [r3, #0]
 810124e:	4a36      	ldr	r2, [pc, #216]	; (8101328 <HAL_DMA_Abort_IT+0x3b8>)
 8101250:	4293      	cmp	r3, r2
 8101252:	d05e      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	681b      	ldr	r3, [r3, #0]
 8101258:	4a34      	ldr	r2, [pc, #208]	; (810132c <HAL_DMA_Abort_IT+0x3bc>)
 810125a:	4293      	cmp	r3, r2
 810125c:	d059      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	681b      	ldr	r3, [r3, #0]
 8101262:	4a33      	ldr	r2, [pc, #204]	; (8101330 <HAL_DMA_Abort_IT+0x3c0>)
 8101264:	4293      	cmp	r3, r2
 8101266:	d054      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	681b      	ldr	r3, [r3, #0]
 810126c:	4a31      	ldr	r2, [pc, #196]	; (8101334 <HAL_DMA_Abort_IT+0x3c4>)
 810126e:	4293      	cmp	r3, r2
 8101270:	d04f      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	681b      	ldr	r3, [r3, #0]
 8101276:	4a30      	ldr	r2, [pc, #192]	; (8101338 <HAL_DMA_Abort_IT+0x3c8>)
 8101278:	4293      	cmp	r3, r2
 810127a:	d04a      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 810127c:	687b      	ldr	r3, [r7, #4]
 810127e:	681b      	ldr	r3, [r3, #0]
 8101280:	4a2e      	ldr	r2, [pc, #184]	; (810133c <HAL_DMA_Abort_IT+0x3cc>)
 8101282:	4293      	cmp	r3, r2
 8101284:	d045      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101286:	687b      	ldr	r3, [r7, #4]
 8101288:	681b      	ldr	r3, [r3, #0]
 810128a:	4a2d      	ldr	r2, [pc, #180]	; (8101340 <HAL_DMA_Abort_IT+0x3d0>)
 810128c:	4293      	cmp	r3, r2
 810128e:	d040      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101290:	687b      	ldr	r3, [r7, #4]
 8101292:	681b      	ldr	r3, [r3, #0]
 8101294:	4a2b      	ldr	r2, [pc, #172]	; (8101344 <HAL_DMA_Abort_IT+0x3d4>)
 8101296:	4293      	cmp	r3, r2
 8101298:	d03b      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	681b      	ldr	r3, [r3, #0]
 810129e:	4a2a      	ldr	r2, [pc, #168]	; (8101348 <HAL_DMA_Abort_IT+0x3d8>)
 81012a0:	4293      	cmp	r3, r2
 81012a2:	d036      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	681b      	ldr	r3, [r3, #0]
 81012a8:	4a28      	ldr	r2, [pc, #160]	; (810134c <HAL_DMA_Abort_IT+0x3dc>)
 81012aa:	4293      	cmp	r3, r2
 81012ac:	d031      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012ae:	687b      	ldr	r3, [r7, #4]
 81012b0:	681b      	ldr	r3, [r3, #0]
 81012b2:	4a27      	ldr	r2, [pc, #156]	; (8101350 <HAL_DMA_Abort_IT+0x3e0>)
 81012b4:	4293      	cmp	r3, r2
 81012b6:	d02c      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	681b      	ldr	r3, [r3, #0]
 81012bc:	4a25      	ldr	r2, [pc, #148]	; (8101354 <HAL_DMA_Abort_IT+0x3e4>)
 81012be:	4293      	cmp	r3, r2
 81012c0:	d027      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	681b      	ldr	r3, [r3, #0]
 81012c6:	4a24      	ldr	r2, [pc, #144]	; (8101358 <HAL_DMA_Abort_IT+0x3e8>)
 81012c8:	4293      	cmp	r3, r2
 81012ca:	d022      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	4a22      	ldr	r2, [pc, #136]	; (810135c <HAL_DMA_Abort_IT+0x3ec>)
 81012d2:	4293      	cmp	r3, r2
 81012d4:	d01d      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	681b      	ldr	r3, [r3, #0]
 81012da:	4a21      	ldr	r2, [pc, #132]	; (8101360 <HAL_DMA_Abort_IT+0x3f0>)
 81012dc:	4293      	cmp	r3, r2
 81012de:	d018      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	4a1f      	ldr	r2, [pc, #124]	; (8101364 <HAL_DMA_Abort_IT+0x3f4>)
 81012e6:	4293      	cmp	r3, r2
 81012e8:	d013      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	681b      	ldr	r3, [r3, #0]
 81012ee:	4a1e      	ldr	r2, [pc, #120]	; (8101368 <HAL_DMA_Abort_IT+0x3f8>)
 81012f0:	4293      	cmp	r3, r2
 81012f2:	d00e      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	4a1c      	ldr	r2, [pc, #112]	; (810136c <HAL_DMA_Abort_IT+0x3fc>)
 81012fa:	4293      	cmp	r3, r2
 81012fc:	d009      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	681b      	ldr	r3, [r3, #0]
 8101302:	4a1b      	ldr	r2, [pc, #108]	; (8101370 <HAL_DMA_Abort_IT+0x400>)
 8101304:	4293      	cmp	r3, r2
 8101306:	d004      	beq.n	8101312 <HAL_DMA_Abort_IT+0x3a2>
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	681b      	ldr	r3, [r3, #0]
 810130c:	4a19      	ldr	r2, [pc, #100]	; (8101374 <HAL_DMA_Abort_IT+0x404>)
 810130e:	4293      	cmp	r3, r2
 8101310:	d132      	bne.n	8101378 <HAL_DMA_Abort_IT+0x408>
 8101312:	2301      	movs	r3, #1
 8101314:	e031      	b.n	810137a <HAL_DMA_Abort_IT+0x40a>
 8101316:	bf00      	nop
 8101318:	40020010 	.word	0x40020010
 810131c:	40020028 	.word	0x40020028
 8101320:	40020040 	.word	0x40020040
 8101324:	40020058 	.word	0x40020058
 8101328:	40020070 	.word	0x40020070
 810132c:	40020088 	.word	0x40020088
 8101330:	400200a0 	.word	0x400200a0
 8101334:	400200b8 	.word	0x400200b8
 8101338:	40020410 	.word	0x40020410
 810133c:	40020428 	.word	0x40020428
 8101340:	40020440 	.word	0x40020440
 8101344:	40020458 	.word	0x40020458
 8101348:	40020470 	.word	0x40020470
 810134c:	40020488 	.word	0x40020488
 8101350:	400204a0 	.word	0x400204a0
 8101354:	400204b8 	.word	0x400204b8
 8101358:	58025408 	.word	0x58025408
 810135c:	5802541c 	.word	0x5802541c
 8101360:	58025430 	.word	0x58025430
 8101364:	58025444 	.word	0x58025444
 8101368:	58025458 	.word	0x58025458
 810136c:	5802546c 	.word	0x5802546c
 8101370:	58025480 	.word	0x58025480
 8101374:	58025494 	.word	0x58025494
 8101378:	2300      	movs	r3, #0
 810137a:	2b00      	cmp	r3, #0
 810137c:	d028      	beq.n	81013d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101382:	681a      	ldr	r2, [r3, #0]
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810138c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101392:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101398:	f003 031f 	and.w	r3, r3, #31
 810139c:	2201      	movs	r2, #1
 810139e:	409a      	lsls	r2, r3
 81013a0:	68fb      	ldr	r3, [r7, #12]
 81013a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81013a8:	687a      	ldr	r2, [r7, #4]
 81013aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81013ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013b2:	2b00      	cmp	r3, #0
 81013b4:	d00c      	beq.n	81013d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013ba:	681a      	ldr	r2, [r3, #0]
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81013c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81013ca:	687a      	ldr	r2, [r7, #4]
 81013cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81013ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	2201      	movs	r2, #1
 81013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	2200      	movs	r2, #0
 81013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d003      	beq.n	81013f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81013ec:	6878      	ldr	r0, [r7, #4]
 81013ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81013f0:	2300      	movs	r3, #0
}
 81013f2:	4618      	mov	r0, r3
 81013f4:	3710      	adds	r7, #16
 81013f6:	46bd      	mov	sp, r7
 81013f8:	bd80      	pop	{r7, pc}
 81013fa:	bf00      	nop

081013fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81013fc:	b480      	push	{r7}
 81013fe:	b085      	sub	sp, #20
 8101400:	af00      	add	r7, sp, #0
 8101402:	6078      	str	r0, [r7, #4]
 8101404:	460b      	mov	r3, r1
 8101406:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101408:	687b      	ldr	r3, [r7, #4]
 810140a:	695b      	ldr	r3, [r3, #20]
 810140c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 810140e:	887a      	ldrh	r2, [r7, #2]
 8101410:	68fb      	ldr	r3, [r7, #12]
 8101412:	4013      	ands	r3, r2
 8101414:	041a      	lsls	r2, r3, #16
 8101416:	68fb      	ldr	r3, [r7, #12]
 8101418:	43d9      	mvns	r1, r3
 810141a:	887b      	ldrh	r3, [r7, #2]
 810141c:	400b      	ands	r3, r1
 810141e:	431a      	orrs	r2, r3
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	619a      	str	r2, [r3, #24]
}
 8101424:	bf00      	nop
 8101426:	3714      	adds	r7, #20
 8101428:	46bd      	mov	sp, r7
 810142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810142e:	4770      	bx	lr

08101430 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101430:	b480      	push	{r7}
 8101432:	b083      	sub	sp, #12
 8101434:	af00      	add	r7, sp, #0
 8101436:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101438:	4a08      	ldr	r2, [pc, #32]	; (810145c <HAL_HSEM_FastTake+0x2c>)
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	3320      	adds	r3, #32
 810143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101442:	4a07      	ldr	r2, [pc, #28]	; (8101460 <HAL_HSEM_FastTake+0x30>)
 8101444:	4293      	cmp	r3, r2
 8101446:	d101      	bne.n	810144c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101448:	2300      	movs	r3, #0
 810144a:	e000      	b.n	810144e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 810144c:	2301      	movs	r3, #1
}
 810144e:	4618      	mov	r0, r3
 8101450:	370c      	adds	r7, #12
 8101452:	46bd      	mov	sp, r7
 8101454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101458:	4770      	bx	lr
 810145a:	bf00      	nop
 810145c:	58026400 	.word	0x58026400
 8101460:	80000100 	.word	0x80000100

08101464 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101464:	b480      	push	{r7}
 8101466:	b083      	sub	sp, #12
 8101468:	af00      	add	r7, sp, #0
 810146a:	6078      	str	r0, [r7, #4]
 810146c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810146e:	4906      	ldr	r1, [pc, #24]	; (8101488 <HAL_HSEM_Release+0x24>)
 8101470:	683b      	ldr	r3, [r7, #0]
 8101472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810147c:	bf00      	nop
 810147e:	370c      	adds	r7, #12
 8101480:	46bd      	mov	sp, r7
 8101482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101486:	4770      	bx	lr
 8101488:	58026400 	.word	0x58026400

0810148c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810148c:	b480      	push	{r7}
 810148e:	b083      	sub	sp, #12
 8101490:	af00      	add	r7, sp, #0
 8101492:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101494:	4b05      	ldr	r3, [pc, #20]	; (81014ac <HAL_HSEM_ActivateNotification+0x20>)
 8101496:	681a      	ldr	r2, [r3, #0]
 8101498:	4904      	ldr	r1, [pc, #16]	; (81014ac <HAL_HSEM_ActivateNotification+0x20>)
 810149a:	687b      	ldr	r3, [r7, #4]
 810149c:	4313      	orrs	r3, r2
 810149e:	600b      	str	r3, [r1, #0]
#endif
}
 81014a0:	bf00      	nop
 81014a2:	370c      	adds	r7, #12
 81014a4:	46bd      	mov	sp, r7
 81014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014aa:	4770      	bx	lr
 81014ac:	58026510 	.word	0x58026510

081014b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b084      	sub	sp, #16
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	60f8      	str	r0, [r7, #12]
 81014b8:	460b      	mov	r3, r1
 81014ba:	607a      	str	r2, [r7, #4]
 81014bc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81014be:	4b37      	ldr	r3, [pc, #220]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	f023 0201 	bic.w	r2, r3, #1
 81014c6:	4935      	ldr	r1, [pc, #212]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014c8:	68fb      	ldr	r3, [r7, #12]
 81014ca:	4313      	orrs	r3, r2
 81014cc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	2b00      	cmp	r3, #0
 81014d2:	d123      	bne.n	810151c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81014d4:	f7ff fa1a 	bl	810090c <HAL_GetCurrentCPUID>
 81014d8:	4603      	mov	r3, r0
 81014da:	2b03      	cmp	r3, #3
 81014dc:	d158      	bne.n	8101590 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81014de:	4b2f      	ldr	r3, [pc, #188]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e0:	691b      	ldr	r3, [r3, #16]
 81014e2:	4a2e      	ldr	r2, [pc, #184]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e4:	f023 0301 	bic.w	r3, r3, #1
 81014e8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81014ea:	4b2d      	ldr	r3, [pc, #180]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014ec:	691b      	ldr	r3, [r3, #16]
 81014ee:	4a2c      	ldr	r2, [pc, #176]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014f0:	f043 0304 	orr.w	r3, r3, #4
 81014f4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81014f6:	f3bf 8f4f 	dsb	sy
}
 81014fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81014fc:	f3bf 8f6f 	isb	sy
}
 8101500:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101502:	7afb      	ldrb	r3, [r7, #11]
 8101504:	2b01      	cmp	r3, #1
 8101506:	d101      	bne.n	810150c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101508:	bf30      	wfi
 810150a:	e000      	b.n	810150e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810150c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810150e:	4b24      	ldr	r3, [pc, #144]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101510:	691b      	ldr	r3, [r3, #16]
 8101512:	4a23      	ldr	r2, [pc, #140]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101514:	f023 0304 	bic.w	r3, r3, #4
 8101518:	6113      	str	r3, [r2, #16]
 810151a:	e03c      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	2b01      	cmp	r3, #1
 8101520:	d123      	bne.n	810156a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101522:	f7ff f9f3 	bl	810090c <HAL_GetCurrentCPUID>
 8101526:	4603      	mov	r3, r0
 8101528:	2b01      	cmp	r3, #1
 810152a:	d133      	bne.n	8101594 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810152c:	4b1b      	ldr	r3, [pc, #108]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 810152e:	695b      	ldr	r3, [r3, #20]
 8101530:	4a1a      	ldr	r2, [pc, #104]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101532:	f023 0302 	bic.w	r3, r3, #2
 8101536:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101538:	4b19      	ldr	r3, [pc, #100]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810153a:	691b      	ldr	r3, [r3, #16]
 810153c:	4a18      	ldr	r2, [pc, #96]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810153e:	f043 0304 	orr.w	r3, r3, #4
 8101542:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101544:	f3bf 8f4f 	dsb	sy
}
 8101548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810154a:	f3bf 8f6f 	isb	sy
}
 810154e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101550:	7afb      	ldrb	r3, [r7, #11]
 8101552:	2b01      	cmp	r3, #1
 8101554:	d101      	bne.n	810155a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101556:	bf30      	wfi
 8101558:	e000      	b.n	810155c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810155a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810155c:	4b10      	ldr	r3, [pc, #64]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810155e:	691b      	ldr	r3, [r3, #16]
 8101560:	4a0f      	ldr	r2, [pc, #60]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101562:	f023 0304 	bic.w	r3, r3, #4
 8101566:	6113      	str	r3, [r2, #16]
 8101568:	e015      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810156a:	f7ff f9cf 	bl	810090c <HAL_GetCurrentCPUID>
 810156e:	4603      	mov	r3, r0
 8101570:	2b03      	cmp	r3, #3
 8101572:	d106      	bne.n	8101582 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101574:	4b09      	ldr	r3, [pc, #36]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101576:	691b      	ldr	r3, [r3, #16]
 8101578:	4a08      	ldr	r2, [pc, #32]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 810157a:	f023 0304 	bic.w	r3, r3, #4
 810157e:	6113      	str	r3, [r2, #16]
 8101580:	e009      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101582:	4b06      	ldr	r3, [pc, #24]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101584:	695b      	ldr	r3, [r3, #20]
 8101586:	4a05      	ldr	r2, [pc, #20]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101588:	f023 0304 	bic.w	r3, r3, #4
 810158c:	6153      	str	r3, [r2, #20]
 810158e:	e002      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101590:	bf00      	nop
 8101592:	e000      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101594:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101596:	3710      	adds	r7, #16
 8101598:	46bd      	mov	sp, r7
 810159a:	bd80      	pop	{r7, pc}
 810159c:	58024800 	.word	0x58024800
 81015a0:	e000ed00 	.word	0xe000ed00

081015a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81015a4:	b580      	push	{r7, lr}
 81015a6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81015a8:	f7ff f9b0 	bl	810090c <HAL_GetCurrentCPUID>
 81015ac:	4603      	mov	r3, r0
 81015ae:	2b03      	cmp	r3, #3
 81015b0:	d101      	bne.n	81015b6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81015b2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81015b4:	e001      	b.n	81015ba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81015b6:	bf40      	sev
    __WFE ();
 81015b8:	bf20      	wfe
}
 81015ba:	bf00      	nop
 81015bc:	bd80      	pop	{r7, pc}
	...

081015c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81015c0:	b480      	push	{r7}
 81015c2:	b089      	sub	sp, #36	; 0x24
 81015c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81015c6:	4bb3      	ldr	r3, [pc, #716]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015c8:	691b      	ldr	r3, [r3, #16]
 81015ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81015ce:	2b18      	cmp	r3, #24
 81015d0:	f200 8155 	bhi.w	810187e <HAL_RCC_GetSysClockFreq+0x2be>
 81015d4:	a201      	add	r2, pc, #4	; (adr r2, 81015dc <HAL_RCC_GetSysClockFreq+0x1c>)
 81015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015da:	bf00      	nop
 81015dc:	08101641 	.word	0x08101641
 81015e0:	0810187f 	.word	0x0810187f
 81015e4:	0810187f 	.word	0x0810187f
 81015e8:	0810187f 	.word	0x0810187f
 81015ec:	0810187f 	.word	0x0810187f
 81015f0:	0810187f 	.word	0x0810187f
 81015f4:	0810187f 	.word	0x0810187f
 81015f8:	0810187f 	.word	0x0810187f
 81015fc:	08101667 	.word	0x08101667
 8101600:	0810187f 	.word	0x0810187f
 8101604:	0810187f 	.word	0x0810187f
 8101608:	0810187f 	.word	0x0810187f
 810160c:	0810187f 	.word	0x0810187f
 8101610:	0810187f 	.word	0x0810187f
 8101614:	0810187f 	.word	0x0810187f
 8101618:	0810187f 	.word	0x0810187f
 810161c:	0810166d 	.word	0x0810166d
 8101620:	0810187f 	.word	0x0810187f
 8101624:	0810187f 	.word	0x0810187f
 8101628:	0810187f 	.word	0x0810187f
 810162c:	0810187f 	.word	0x0810187f
 8101630:	0810187f 	.word	0x0810187f
 8101634:	0810187f 	.word	0x0810187f
 8101638:	0810187f 	.word	0x0810187f
 810163c:	08101673 	.word	0x08101673
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101640:	4b94      	ldr	r3, [pc, #592]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101642:	681b      	ldr	r3, [r3, #0]
 8101644:	f003 0320 	and.w	r3, r3, #32
 8101648:	2b00      	cmp	r3, #0
 810164a:	d009      	beq.n	8101660 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810164c:	4b91      	ldr	r3, [pc, #580]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	08db      	lsrs	r3, r3, #3
 8101652:	f003 0303 	and.w	r3, r3, #3
 8101656:	4a90      	ldr	r2, [pc, #576]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101658:	fa22 f303 	lsr.w	r3, r2, r3
 810165c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810165e:	e111      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101660:	4b8d      	ldr	r3, [pc, #564]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101662:	61bb      	str	r3, [r7, #24]
      break;
 8101664:	e10e      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101666:	4b8d      	ldr	r3, [pc, #564]	; (810189c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101668:	61bb      	str	r3, [r7, #24]
      break;
 810166a:	e10b      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810166c:	4b8c      	ldr	r3, [pc, #560]	; (81018a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810166e:	61bb      	str	r3, [r7, #24]
      break;
 8101670:	e108      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101672:	4b88      	ldr	r3, [pc, #544]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101676:	f003 0303 	and.w	r3, r3, #3
 810167a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810167c:	4b85      	ldr	r3, [pc, #532]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101680:	091b      	lsrs	r3, r3, #4
 8101682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101686:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101688:	4b82      	ldr	r3, [pc, #520]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810168c:	f003 0301 	and.w	r3, r3, #1
 8101690:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101692:	4b80      	ldr	r3, [pc, #512]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101696:	08db      	lsrs	r3, r3, #3
 8101698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810169c:	68fa      	ldr	r2, [r7, #12]
 810169e:	fb02 f303 	mul.w	r3, r2, r3
 81016a2:	ee07 3a90 	vmov	s15, r3
 81016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81016ae:	693b      	ldr	r3, [r7, #16]
 81016b0:	2b00      	cmp	r3, #0
 81016b2:	f000 80e1 	beq.w	8101878 <HAL_RCC_GetSysClockFreq+0x2b8>
 81016b6:	697b      	ldr	r3, [r7, #20]
 81016b8:	2b02      	cmp	r3, #2
 81016ba:	f000 8083 	beq.w	81017c4 <HAL_RCC_GetSysClockFreq+0x204>
 81016be:	697b      	ldr	r3, [r7, #20]
 81016c0:	2b02      	cmp	r3, #2
 81016c2:	f200 80a1 	bhi.w	8101808 <HAL_RCC_GetSysClockFreq+0x248>
 81016c6:	697b      	ldr	r3, [r7, #20]
 81016c8:	2b00      	cmp	r3, #0
 81016ca:	d003      	beq.n	81016d4 <HAL_RCC_GetSysClockFreq+0x114>
 81016cc:	697b      	ldr	r3, [r7, #20]
 81016ce:	2b01      	cmp	r3, #1
 81016d0:	d056      	beq.n	8101780 <HAL_RCC_GetSysClockFreq+0x1c0>
 81016d2:	e099      	b.n	8101808 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81016d4:	4b6f      	ldr	r3, [pc, #444]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	f003 0320 	and.w	r3, r3, #32
 81016dc:	2b00      	cmp	r3, #0
 81016de:	d02d      	beq.n	810173c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81016e0:	4b6c      	ldr	r3, [pc, #432]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016e2:	681b      	ldr	r3, [r3, #0]
 81016e4:	08db      	lsrs	r3, r3, #3
 81016e6:	f003 0303 	and.w	r3, r3, #3
 81016ea:	4a6b      	ldr	r2, [pc, #428]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81016ec:	fa22 f303 	lsr.w	r3, r2, r3
 81016f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	ee07 3a90 	vmov	s15, r3
 81016f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016fc:	693b      	ldr	r3, [r7, #16]
 81016fe:	ee07 3a90 	vmov	s15, r3
 8101702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810170a:	4b62      	ldr	r3, [pc, #392]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810170e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101712:	ee07 3a90 	vmov	s15, r3
 8101716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810171a:	ed97 6a02 	vldr	s12, [r7, #8]
 810171e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810172a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810172e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101736:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810173a:	e087      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810173c:	693b      	ldr	r3, [r7, #16]
 810173e:	ee07 3a90 	vmov	s15, r3
 8101742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101746:	eddf 6a58 	vldr	s13, [pc, #352]	; 81018a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810174a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810174e:	4b51      	ldr	r3, [pc, #324]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101756:	ee07 3a90 	vmov	s15, r3
 810175a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810175e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101762:	eddf 5a50 	vldr	s11, [pc, #320]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810176a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810176e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101776:	ee67 7a27 	vmul.f32	s15, s14, s15
 810177a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810177e:	e065      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101780:	693b      	ldr	r3, [r7, #16]
 8101782:	ee07 3a90 	vmov	s15, r3
 8101786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810178a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81018ac <HAL_RCC_GetSysClockFreq+0x2ec>
 810178e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101792:	4b40      	ldr	r3, [pc, #256]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810179a:	ee07 3a90 	vmov	s15, r3
 810179e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81017a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81017a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81017aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81017ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81017b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81017be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81017c2:	e043      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81017c4:	693b      	ldr	r3, [r7, #16]
 81017c6:	ee07 3a90 	vmov	s15, r3
 81017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 81018b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81017d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017d6:	4b2f      	ldr	r3, [pc, #188]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81017da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81017de:	ee07 3a90 	vmov	s15, r3
 81017e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81017e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81017ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81017ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81017f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81017f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101806:	e021      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101808:	693b      	ldr	r3, [r7, #16]
 810180a:	ee07 3a90 	vmov	s15, r3
 810180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101812:	eddf 6a26 	vldr	s13, [pc, #152]	; 81018ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8101816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810181a:	4b1e      	ldr	r3, [pc, #120]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810181e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101822:	ee07 3a90 	vmov	s15, r3
 8101826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810182a:	ed97 6a02 	vldr	s12, [r7, #8]
 810182e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810183a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810183e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810184a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810184c:	4b11      	ldr	r3, [pc, #68]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101850:	0a5b      	lsrs	r3, r3, #9
 8101852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101856:	3301      	adds	r3, #1
 8101858:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810185a:	683b      	ldr	r3, [r7, #0]
 810185c:	ee07 3a90 	vmov	s15, r3
 8101860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101864:	edd7 6a07 	vldr	s13, [r7, #28]
 8101868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810186c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101870:	ee17 3a90 	vmov	r3, s15
 8101874:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101876:	e005      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101878:	2300      	movs	r3, #0
 810187a:	61bb      	str	r3, [r7, #24]
      break;
 810187c:	e002      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810187e:	4b07      	ldr	r3, [pc, #28]	; (810189c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101880:	61bb      	str	r3, [r7, #24]
      break;
 8101882:	bf00      	nop
  }

  return sysclockfreq;
 8101884:	69bb      	ldr	r3, [r7, #24]
}
 8101886:	4618      	mov	r0, r3
 8101888:	3724      	adds	r7, #36	; 0x24
 810188a:	46bd      	mov	sp, r7
 810188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101890:	4770      	bx	lr
 8101892:	bf00      	nop
 8101894:	58024400 	.word	0x58024400
 8101898:	03d09000 	.word	0x03d09000
 810189c:	003d0900 	.word	0x003d0900
 81018a0:	017d7840 	.word	0x017d7840
 81018a4:	46000000 	.word	0x46000000
 81018a8:	4c742400 	.word	0x4c742400
 81018ac:	4a742400 	.word	0x4a742400
 81018b0:	4bbebc20 	.word	0x4bbebc20

081018b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b0ba      	sub	sp, #232	; 0xe8
 81018b8:	af00      	add	r7, sp, #0
 81018ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	69db      	ldr	r3, [r3, #28]
 81018c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	681b      	ldr	r3, [r3, #0]
 81018cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	689b      	ldr	r3, [r3, #8]
 81018d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81018da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 81018de:	f640 030f 	movw	r3, #2063	; 0x80f
 81018e2:	4013      	ands	r3, r2
 81018e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 81018e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 81018ec:	2b00      	cmp	r3, #0
 81018ee:	d11b      	bne.n	8101928 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81018f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81018f4:	f003 0320 	and.w	r3, r3, #32
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d015      	beq.n	8101928 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81018fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101900:	f003 0320 	and.w	r3, r3, #32
 8101904:	2b00      	cmp	r3, #0
 8101906:	d105      	bne.n	8101914 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8101908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 810190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101910:	2b00      	cmp	r3, #0
 8101912:	d009      	beq.n	8101928 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101918:	2b00      	cmp	r3, #0
 810191a:	f000 8379 	beq.w	8102010 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101922:	6878      	ldr	r0, [r7, #4]
 8101924:	4798      	blx	r3
      }
      return;
 8101926:	e373      	b.n	8102010 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8101928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 810192c:	2b00      	cmp	r3, #0
 810192e:	f000 8123 	beq.w	8101b78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8101932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8101936:	4b8d      	ldr	r3, [pc, #564]	; (8101b6c <HAL_UART_IRQHandler+0x2b8>)
 8101938:	4013      	ands	r3, r2
 810193a:	2b00      	cmp	r3, #0
 810193c:	d106      	bne.n	810194c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810193e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8101942:	4b8b      	ldr	r3, [pc, #556]	; (8101b70 <HAL_UART_IRQHandler+0x2bc>)
 8101944:	4013      	ands	r3, r2
 8101946:	2b00      	cmp	r3, #0
 8101948:	f000 8116 	beq.w	8101b78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810194c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101950:	f003 0301 	and.w	r3, r3, #1
 8101954:	2b00      	cmp	r3, #0
 8101956:	d011      	beq.n	810197c <HAL_UART_IRQHandler+0xc8>
 8101958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101960:	2b00      	cmp	r3, #0
 8101962:	d00b      	beq.n	810197c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	681b      	ldr	r3, [r3, #0]
 8101968:	2201      	movs	r2, #1
 810196a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101972:	f043 0201 	orr.w	r2, r3, #1
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810197c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101980:	f003 0302 	and.w	r3, r3, #2
 8101984:	2b00      	cmp	r3, #0
 8101986:	d011      	beq.n	81019ac <HAL_UART_IRQHandler+0xf8>
 8101988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 810198c:	f003 0301 	and.w	r3, r3, #1
 8101990:	2b00      	cmp	r3, #0
 8101992:	d00b      	beq.n	81019ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	2202      	movs	r2, #2
 810199a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81019a2:	f043 0204 	orr.w	r2, r3, #4
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81019ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81019b0:	f003 0304 	and.w	r3, r3, #4
 81019b4:	2b00      	cmp	r3, #0
 81019b6:	d011      	beq.n	81019dc <HAL_UART_IRQHandler+0x128>
 81019b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81019bc:	f003 0301 	and.w	r3, r3, #1
 81019c0:	2b00      	cmp	r3, #0
 81019c2:	d00b      	beq.n	81019dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	681b      	ldr	r3, [r3, #0]
 81019c8:	2204      	movs	r2, #4
 81019ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81019d2:	f043 0202 	orr.w	r2, r3, #2
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81019dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81019e0:	f003 0308 	and.w	r3, r3, #8
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d017      	beq.n	8101a18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81019e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81019ec:	f003 0320 	and.w	r3, r3, #32
 81019f0:	2b00      	cmp	r3, #0
 81019f2:	d105      	bne.n	8101a00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81019f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81019f8:	4b5c      	ldr	r3, [pc, #368]	; (8101b6c <HAL_UART_IRQHandler+0x2b8>)
 81019fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81019fc:	2b00      	cmp	r3, #0
 81019fe:	d00b      	beq.n	8101a18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	2208      	movs	r2, #8
 8101a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101a0e:	f043 0208 	orr.w	r2, r3, #8
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8101a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101a20:	2b00      	cmp	r3, #0
 8101a22:	d012      	beq.n	8101a4a <HAL_UART_IRQHandler+0x196>
 8101a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8101a2c:	2b00      	cmp	r3, #0
 8101a2e:	d00c      	beq.n	8101a4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101a40:	f043 0220 	orr.w	r2, r3, #32
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	f000 82df 	beq.w	8102014 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8101a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101a5a:	f003 0320 	and.w	r3, r3, #32
 8101a5e:	2b00      	cmp	r3, #0
 8101a60:	d013      	beq.n	8101a8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8101a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101a66:	f003 0320 	and.w	r3, r3, #32
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d105      	bne.n	8101a7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8101a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8101a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d007      	beq.n	8101a8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101a7e:	2b00      	cmp	r3, #0
 8101a80:	d003      	beq.n	8101a8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101a86:	6878      	ldr	r0, [r7, #4]
 8101a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	689b      	ldr	r3, [r3, #8]
 8101a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a9e:	2b40      	cmp	r3, #64	; 0x40
 8101aa0:	d005      	beq.n	8101aae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8101aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8101aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d054      	beq.n	8101b58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8101aae:	6878      	ldr	r0, [r7, #4]
 8101ab0:	f000 fada 	bl	8102068 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	689b      	ldr	r3, [r3, #8]
 8101aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101abe:	2b40      	cmp	r3, #64	; 0x40
 8101ac0:	d146      	bne.n	8101b50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	681b      	ldr	r3, [r3, #0]
 8101ac6:	3308      	adds	r3, #8
 8101ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8101ad0:	e853 3f00 	ldrex	r3, [r3]
 8101ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8101ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8101ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	681b      	ldr	r3, [r3, #0]
 8101ae8:	3308      	adds	r3, #8
 8101aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8101aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8101af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8101afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8101afe:	e841 2300 	strex	r3, r2, [r1]
 8101b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8101b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8101b0a:	2b00      	cmp	r3, #0
 8101b0c:	d1d9      	bne.n	8101ac2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101b14:	2b00      	cmp	r3, #0
 8101b16:	d017      	beq.n	8101b48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101b1e:	4a15      	ldr	r2, [pc, #84]	; (8101b74 <HAL_UART_IRQHandler+0x2c0>)
 8101b20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101b28:	4618      	mov	r0, r3
 8101b2a:	f7ff fa21 	bl	8100f70 <HAL_DMA_Abort_IT>
 8101b2e:	4603      	mov	r3, r0
 8101b30:	2b00      	cmp	r3, #0
 8101b32:	d019      	beq.n	8101b68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b3c:	687a      	ldr	r2, [r7, #4]
 8101b3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8101b42:	4610      	mov	r0, r2
 8101b44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101b46:	e00f      	b.n	8101b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8101b48:	6878      	ldr	r0, [r7, #4]
 8101b4a:	f000 fa77 	bl	810203c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101b4e:	e00b      	b.n	8101b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8101b50:	6878      	ldr	r0, [r7, #4]
 8101b52:	f000 fa73 	bl	810203c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101b56:	e007      	b.n	8101b68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8101b58:	6878      	ldr	r0, [r7, #4]
 8101b5a:	f000 fa6f 	bl	810203c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	2200      	movs	r2, #0
 8101b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8101b66:	e255      	b.n	8102014 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101b68:	bf00      	nop
    return;
 8101b6a:	e253      	b.n	8102014 <HAL_UART_IRQHandler+0x760>
 8101b6c:	10000001 	.word	0x10000001
 8101b70:	04000120 	.word	0x04000120
 8101b74:	08102135 	.word	0x08102135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101b7c:	2b01      	cmp	r3, #1
 8101b7e:	f040 81e9 	bne.w	8101f54 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8101b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101b86:	f003 0310 	and.w	r3, r3, #16
 8101b8a:	2b00      	cmp	r3, #0
 8101b8c:	f000 81e2 	beq.w	8101f54 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8101b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101b94:	f003 0310 	and.w	r3, r3, #16
 8101b98:	2b00      	cmp	r3, #0
 8101b9a:	f000 81db 	beq.w	8101f54 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	2210      	movs	r2, #16
 8101ba4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	681b      	ldr	r3, [r3, #0]
 8101baa:	689b      	ldr	r3, [r3, #8]
 8101bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101bb0:	2b40      	cmp	r3, #64	; 0x40
 8101bb2:	f040 8151 	bne.w	8101e58 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101bbc:	681b      	ldr	r3, [r3, #0]
 8101bbe:	4a96      	ldr	r2, [pc, #600]	; (8101e18 <HAL_UART_IRQHandler+0x564>)
 8101bc0:	4293      	cmp	r3, r2
 8101bc2:	d068      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101bca:	681b      	ldr	r3, [r3, #0]
 8101bcc:	4a93      	ldr	r2, [pc, #588]	; (8101e1c <HAL_UART_IRQHandler+0x568>)
 8101bce:	4293      	cmp	r3, r2
 8101bd0:	d061      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	4a91      	ldr	r2, [pc, #580]	; (8101e20 <HAL_UART_IRQHandler+0x56c>)
 8101bdc:	4293      	cmp	r3, r2
 8101bde:	d05a      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	4a8e      	ldr	r2, [pc, #568]	; (8101e24 <HAL_UART_IRQHandler+0x570>)
 8101bea:	4293      	cmp	r3, r2
 8101bec:	d053      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a8c      	ldr	r2, [pc, #560]	; (8101e28 <HAL_UART_IRQHandler+0x574>)
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d04c      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	4a89      	ldr	r2, [pc, #548]	; (8101e2c <HAL_UART_IRQHandler+0x578>)
 8101c06:	4293      	cmp	r3, r2
 8101c08:	d045      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	4a87      	ldr	r2, [pc, #540]	; (8101e30 <HAL_UART_IRQHandler+0x57c>)
 8101c14:	4293      	cmp	r3, r2
 8101c16:	d03e      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	4a84      	ldr	r2, [pc, #528]	; (8101e34 <HAL_UART_IRQHandler+0x580>)
 8101c22:	4293      	cmp	r3, r2
 8101c24:	d037      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	4a82      	ldr	r2, [pc, #520]	; (8101e38 <HAL_UART_IRQHandler+0x584>)
 8101c30:	4293      	cmp	r3, r2
 8101c32:	d030      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	4a7f      	ldr	r2, [pc, #508]	; (8101e3c <HAL_UART_IRQHandler+0x588>)
 8101c3e:	4293      	cmp	r3, r2
 8101c40:	d029      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	4a7d      	ldr	r2, [pc, #500]	; (8101e40 <HAL_UART_IRQHandler+0x58c>)
 8101c4c:	4293      	cmp	r3, r2
 8101c4e:	d022      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c56:	681b      	ldr	r3, [r3, #0]
 8101c58:	4a7a      	ldr	r2, [pc, #488]	; (8101e44 <HAL_UART_IRQHandler+0x590>)
 8101c5a:	4293      	cmp	r3, r2
 8101c5c:	d01b      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	4a78      	ldr	r2, [pc, #480]	; (8101e48 <HAL_UART_IRQHandler+0x594>)
 8101c68:	4293      	cmp	r3, r2
 8101c6a:	d014      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c72:	681b      	ldr	r3, [r3, #0]
 8101c74:	4a75      	ldr	r2, [pc, #468]	; (8101e4c <HAL_UART_IRQHandler+0x598>)
 8101c76:	4293      	cmp	r3, r2
 8101c78:	d00d      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c80:	681b      	ldr	r3, [r3, #0]
 8101c82:	4a73      	ldr	r2, [pc, #460]	; (8101e50 <HAL_UART_IRQHandler+0x59c>)
 8101c84:	4293      	cmp	r3, r2
 8101c86:	d006      	beq.n	8101c96 <HAL_UART_IRQHandler+0x3e2>
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	4a70      	ldr	r2, [pc, #448]	; (8101e54 <HAL_UART_IRQHandler+0x5a0>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d106      	bne.n	8101ca4 <HAL_UART_IRQHandler+0x3f0>
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101c9c:	681b      	ldr	r3, [r3, #0]
 8101c9e:	685b      	ldr	r3, [r3, #4]
 8101ca0:	b29b      	uxth	r3, r3
 8101ca2:	e005      	b.n	8101cb0 <HAL_UART_IRQHandler+0x3fc>
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	685b      	ldr	r3, [r3, #4]
 8101cae:	b29b      	uxth	r3, r3
 8101cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8101cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8101cb8:	2b00      	cmp	r3, #0
 8101cba:	f000 81ad 	beq.w	8102018 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8101cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8101cc8:	429a      	cmp	r2, r3
 8101cca:	f080 81a5 	bcs.w	8102018 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8101cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101cde:	69db      	ldr	r3, [r3, #28]
 8101ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101ce4:	f000 8087 	beq.w	8101df6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	681b      	ldr	r3, [r3, #0]
 8101cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8101cf4:	e853 3f00 	ldrex	r3, [r3]
 8101cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8101cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8101d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	461a      	mov	r2, r3
 8101d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8101d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8101d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8101d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8101d22:	e841 2300 	strex	r3, r2, [r1]
 8101d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8101d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d1da      	bne.n	8101ce8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	3308      	adds	r3, #8
 8101d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101d3c:	e853 3f00 	ldrex	r3, [r3]
 8101d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8101d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101d44:	f023 0301 	bic.w	r3, r3, #1
 8101d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	3308      	adds	r3, #8
 8101d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8101d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8101d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8101d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8101d62:	e841 2300 	strex	r3, r2, [r1]
 8101d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8101d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101d6a:	2b00      	cmp	r3, #0
 8101d6c:	d1e1      	bne.n	8101d32 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	3308      	adds	r3, #8
 8101d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101d78:	e853 3f00 	ldrex	r3, [r3]
 8101d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8101d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8101d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	3308      	adds	r3, #8
 8101d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8101d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8101d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8101d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8101d9a:	e841 2300 	strex	r3, r2, [r1]
 8101d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8101da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101da2:	2b00      	cmp	r3, #0
 8101da4:	d1e3      	bne.n	8101d6e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	2220      	movs	r2, #32
 8101daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	2200      	movs	r2, #0
 8101db2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101dbc:	e853 3f00 	ldrex	r3, [r3]
 8101dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8101dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101dc4:	f023 0310 	bic.w	r3, r3, #16
 8101dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	681b      	ldr	r3, [r3, #0]
 8101dd0:	461a      	mov	r2, r3
 8101dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8101dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8101dd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8101dde:	e841 2300 	strex	r3, r2, [r1]
 8101de2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8101de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	d1e4      	bne.n	8101db4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101df0:	4618      	mov	r0, r3
 8101df2:	f7fe fd9f 	bl	8100934 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	2202      	movs	r2, #2
 8101dfa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8101e08:	b29b      	uxth	r3, r3
 8101e0a:	1ad3      	subs	r3, r2, r3
 8101e0c:	b29b      	uxth	r3, r3
 8101e0e:	4619      	mov	r1, r3
 8101e10:	6878      	ldr	r0, [r7, #4]
 8101e12:	f000 f91d 	bl	8102050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8101e16:	e0ff      	b.n	8102018 <HAL_UART_IRQHandler+0x764>
 8101e18:	40020010 	.word	0x40020010
 8101e1c:	40020028 	.word	0x40020028
 8101e20:	40020040 	.word	0x40020040
 8101e24:	40020058 	.word	0x40020058
 8101e28:	40020070 	.word	0x40020070
 8101e2c:	40020088 	.word	0x40020088
 8101e30:	400200a0 	.word	0x400200a0
 8101e34:	400200b8 	.word	0x400200b8
 8101e38:	40020410 	.word	0x40020410
 8101e3c:	40020428 	.word	0x40020428
 8101e40:	40020440 	.word	0x40020440
 8101e44:	40020458 	.word	0x40020458
 8101e48:	40020470 	.word	0x40020470
 8101e4c:	40020488 	.word	0x40020488
 8101e50:	400204a0 	.word	0x400204a0
 8101e54:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8101e64:	b29b      	uxth	r3, r3
 8101e66:	1ad3      	subs	r3, r2, r3
 8101e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8101e6c:	687b      	ldr	r3, [r7, #4]
 8101e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8101e72:	b29b      	uxth	r3, r3
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	f000 80d1 	beq.w	810201c <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 8101e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	f000 80cc 	beq.w	810201c <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101e8c:	e853 3f00 	ldrex	r3, [r3]
 8101e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8101e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8101e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	461a      	mov	r2, r3
 8101ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8101ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8101ea8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8101eac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101eae:	e841 2300 	strex	r3, r2, [r1]
 8101eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8101eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101eb6:	2b00      	cmp	r3, #0
 8101eb8:	d1e4      	bne.n	8101e84 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
 8101ebe:	3308      	adds	r3, #8
 8101ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ec4:	e853 3f00 	ldrex	r3, [r3]
 8101ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8101eca:	6a3b      	ldr	r3, [r7, #32]
 8101ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8101ed0:	f023 0301 	bic.w	r3, r3, #1
 8101ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	681b      	ldr	r3, [r3, #0]
 8101edc:	3308      	adds	r3, #8
 8101ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8101ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8101ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8101ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101eea:	e841 2300 	strex	r3, r2, [r1]
 8101eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8101ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ef2:	2b00      	cmp	r3, #0
 8101ef4:	d1e1      	bne.n	8101eba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	2220      	movs	r2, #32
 8101efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	2200      	movs	r2, #0
 8101f02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	2200      	movs	r2, #0
 8101f08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	681b      	ldr	r3, [r3, #0]
 8101f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101f10:	693b      	ldr	r3, [r7, #16]
 8101f12:	e853 3f00 	ldrex	r3, [r3]
 8101f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8101f18:	68fb      	ldr	r3, [r7, #12]
 8101f1a:	f023 0310 	bic.w	r3, r3, #16
 8101f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	461a      	mov	r2, r3
 8101f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101f2c:	61fb      	str	r3, [r7, #28]
 8101f2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101f30:	69b9      	ldr	r1, [r7, #24]
 8101f32:	69fa      	ldr	r2, [r7, #28]
 8101f34:	e841 2300 	strex	r3, r2, [r1]
 8101f38:	617b      	str	r3, [r7, #20]
   return(result);
 8101f3a:	697b      	ldr	r3, [r7, #20]
 8101f3c:	2b00      	cmp	r3, #0
 8101f3e:	d1e4      	bne.n	8101f0a <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	2202      	movs	r2, #2
 8101f44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8101f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8101f4a:	4619      	mov	r1, r3
 8101f4c:	6878      	ldr	r0, [r7, #4]
 8101f4e:	f000 f87f 	bl	8102050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8101f52:	e063      	b.n	810201c <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8101f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d00e      	beq.n	8101f7e <HAL_UART_IRQHandler+0x6ca>
 8101f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8101f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101f68:	2b00      	cmp	r3, #0
 8101f6a:	d008      	beq.n	8101f7e <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8101f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8101f76:	6878      	ldr	r0, [r7, #4]
 8101f78:	f000 f91d 	bl	81021b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8101f7c:	e051      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8101f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f86:	2b00      	cmp	r3, #0
 8101f88:	d014      	beq.n	8101fb4 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8101f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f92:	2b00      	cmp	r3, #0
 8101f94:	d105      	bne.n	8101fa2 <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8101f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8101f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101f9e:	2b00      	cmp	r3, #0
 8101fa0:	d008      	beq.n	8101fb4 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101fa6:	2b00      	cmp	r3, #0
 8101fa8:	d03a      	beq.n	8102020 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101fae:	6878      	ldr	r0, [r7, #4]
 8101fb0:	4798      	blx	r3
    }
    return;
 8101fb2:	e035      	b.n	8102020 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8101fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101fbc:	2b00      	cmp	r3, #0
 8101fbe:	d009      	beq.n	8101fd4 <HAL_UART_IRQHandler+0x720>
 8101fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101fc8:	2b00      	cmp	r3, #0
 8101fca:	d003      	beq.n	8101fd4 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 8101fcc:	6878      	ldr	r0, [r7, #4]
 8101fce:	f000 f8c7 	bl	8102160 <UART_EndTransmit_IT>
    return;
 8101fd2:	e026      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8101fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d009      	beq.n	8101ff4 <HAL_UART_IRQHandler+0x740>
 8101fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101fe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8101fe8:	2b00      	cmp	r3, #0
 8101fea:	d003      	beq.n	8101ff4 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8101fec:	6878      	ldr	r0, [r7, #4]
 8101fee:	f000 f8f6 	bl	81021de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8101ff2:	e016      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8101ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d010      	beq.n	8102022 <HAL_UART_IRQHandler+0x76e>
 8102000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102004:	2b00      	cmp	r3, #0
 8102006:	da0c      	bge.n	8102022 <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8102008:	6878      	ldr	r0, [r7, #4]
 810200a:	f000 f8de 	bl	81021ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810200e:	e008      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
      return;
 8102010:	bf00      	nop
 8102012:	e006      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
    return;
 8102014:	bf00      	nop
 8102016:	e004      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
      return;
 8102018:	bf00      	nop
 810201a:	e002      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
      return;
 810201c:	bf00      	nop
 810201e:	e000      	b.n	8102022 <HAL_UART_IRQHandler+0x76e>
    return;
 8102020:	bf00      	nop
  }
}
 8102022:	37e8      	adds	r7, #232	; 0xe8
 8102024:	46bd      	mov	sp, r7
 8102026:	bd80      	pop	{r7, pc}

08102028 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8102028:	b480      	push	{r7}
 810202a:	b083      	sub	sp, #12
 810202c:	af00      	add	r7, sp, #0
 810202e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8102030:	bf00      	nop
 8102032:	370c      	adds	r7, #12
 8102034:	46bd      	mov	sp, r7
 8102036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203a:	4770      	bx	lr

0810203c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810203c:	b480      	push	{r7}
 810203e:	b083      	sub	sp, #12
 8102040:	af00      	add	r7, sp, #0
 8102042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8102044:	bf00      	nop
 8102046:	370c      	adds	r7, #12
 8102048:	46bd      	mov	sp, r7
 810204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810204e:	4770      	bx	lr

08102050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8102050:	b480      	push	{r7}
 8102052:	b083      	sub	sp, #12
 8102054:	af00      	add	r7, sp, #0
 8102056:	6078      	str	r0, [r7, #4]
 8102058:	460b      	mov	r3, r1
 810205a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810205c:	bf00      	nop
 810205e:	370c      	adds	r7, #12
 8102060:	46bd      	mov	sp, r7
 8102062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102066:	4770      	bx	lr

08102068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8102068:	b480      	push	{r7}
 810206a:	b095      	sub	sp, #84	; 0x54
 810206c:	af00      	add	r7, sp, #0
 810206e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102078:	e853 3f00 	ldrex	r3, [r3]
 810207c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8102084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	461a      	mov	r2, r3
 810208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810208e:	643b      	str	r3, [r7, #64]	; 0x40
 8102090:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8102094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8102096:	e841 2300 	strex	r3, r2, [r1]
 810209a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d1e6      	bne.n	8102070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	3308      	adds	r3, #8
 81020a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81020aa:	6a3b      	ldr	r3, [r7, #32]
 81020ac:	e853 3f00 	ldrex	r3, [r3]
 81020b0:	61fb      	str	r3, [r7, #28]
   return(result);
 81020b2:	69fb      	ldr	r3, [r7, #28]
 81020b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81020b8:	f023 0301 	bic.w	r3, r3, #1
 81020bc:	64bb      	str	r3, [r7, #72]	; 0x48
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	3308      	adds	r3, #8
 81020c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81020c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 81020c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81020ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81020ce:	e841 2300 	strex	r3, r2, [r1]
 81020d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d1e3      	bne.n	81020a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81020de:	2b01      	cmp	r3, #1
 81020e0:	d118      	bne.n	8102114 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	681b      	ldr	r3, [r3, #0]
 81020e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81020e8:	68fb      	ldr	r3, [r7, #12]
 81020ea:	e853 3f00 	ldrex	r3, [r3]
 81020ee:	60bb      	str	r3, [r7, #8]
   return(result);
 81020f0:	68bb      	ldr	r3, [r7, #8]
 81020f2:	f023 0310 	bic.w	r3, r3, #16
 81020f6:	647b      	str	r3, [r7, #68]	; 0x44
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	461a      	mov	r2, r3
 81020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102100:	61bb      	str	r3, [r7, #24]
 8102102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102104:	6979      	ldr	r1, [r7, #20]
 8102106:	69ba      	ldr	r2, [r7, #24]
 8102108:	e841 2300 	strex	r3, r2, [r1]
 810210c:	613b      	str	r3, [r7, #16]
   return(result);
 810210e:	693b      	ldr	r3, [r7, #16]
 8102110:	2b00      	cmp	r3, #0
 8102112:	d1e6      	bne.n	81020e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	2220      	movs	r2, #32
 8102118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	2200      	movs	r2, #0
 8102120:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	2200      	movs	r2, #0
 8102126:	675a      	str	r2, [r3, #116]	; 0x74
}
 8102128:	bf00      	nop
 810212a:	3754      	adds	r7, #84	; 0x54
 810212c:	46bd      	mov	sp, r7
 810212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102132:	4770      	bx	lr

08102134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8102134:	b580      	push	{r7, lr}
 8102136:	b084      	sub	sp, #16
 8102138:	af00      	add	r7, sp, #0
 810213a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8102142:	68fb      	ldr	r3, [r7, #12]
 8102144:	2200      	movs	r2, #0
 8102146:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810214a:	68fb      	ldr	r3, [r7, #12]
 810214c:	2200      	movs	r2, #0
 810214e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8102152:	68f8      	ldr	r0, [r7, #12]
 8102154:	f7ff ff72 	bl	810203c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8102158:	bf00      	nop
 810215a:	3710      	adds	r7, #16
 810215c:	46bd      	mov	sp, r7
 810215e:	bd80      	pop	{r7, pc}

08102160 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8102160:	b580      	push	{r7, lr}
 8102162:	b088      	sub	sp, #32
 8102164:	af00      	add	r7, sp, #0
 8102166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810216e:	68fb      	ldr	r3, [r7, #12]
 8102170:	e853 3f00 	ldrex	r3, [r3]
 8102174:	60bb      	str	r3, [r7, #8]
   return(result);
 8102176:	68bb      	ldr	r3, [r7, #8]
 8102178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810217c:	61fb      	str	r3, [r7, #28]
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	681b      	ldr	r3, [r3, #0]
 8102182:	461a      	mov	r2, r3
 8102184:	69fb      	ldr	r3, [r7, #28]
 8102186:	61bb      	str	r3, [r7, #24]
 8102188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810218a:	6979      	ldr	r1, [r7, #20]
 810218c:	69ba      	ldr	r2, [r7, #24]
 810218e:	e841 2300 	strex	r3, r2, [r1]
 8102192:	613b      	str	r3, [r7, #16]
   return(result);
 8102194:	693b      	ldr	r3, [r7, #16]
 8102196:	2b00      	cmp	r3, #0
 8102198:	d1e6      	bne.n	8102168 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	2220      	movs	r2, #32
 810219e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	2200      	movs	r2, #0
 81021a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81021a8:	6878      	ldr	r0, [r7, #4]
 81021aa:	f7ff ff3d 	bl	8102028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81021ae:	bf00      	nop
 81021b0:	3720      	adds	r7, #32
 81021b2:	46bd      	mov	sp, r7
 81021b4:	bd80      	pop	{r7, pc}

081021b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 81021b6:	b480      	push	{r7}
 81021b8:	b083      	sub	sp, #12
 81021ba:	af00      	add	r7, sp, #0
 81021bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 81021be:	bf00      	nop
 81021c0:	370c      	adds	r7, #12
 81021c2:	46bd      	mov	sp, r7
 81021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021c8:	4770      	bx	lr

081021ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 81021ca:	b480      	push	{r7}
 81021cc:	b083      	sub	sp, #12
 81021ce:	af00      	add	r7, sp, #0
 81021d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 81021d2:	bf00      	nop
 81021d4:	370c      	adds	r7, #12
 81021d6:	46bd      	mov	sp, r7
 81021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021dc:	4770      	bx	lr

081021de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 81021de:	b480      	push	{r7}
 81021e0:	b083      	sub	sp, #12
 81021e2:	af00      	add	r7, sp, #0
 81021e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 81021e6:	bf00      	nop
 81021e8:	370c      	adds	r7, #12
 81021ea:	46bd      	mov	sp, r7
 81021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f0:	4770      	bx	lr
	...

081021f4 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 81021f4:	b580      	push	{r7, lr}
 81021f6:	b084      	sub	sp, #16
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	6078      	str	r0, [r7, #4]
 81021fc:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 81021fe:	2300      	movs	r3, #0
 8102200:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 8102202:	2300      	movs	r3, #0
 8102204:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 8102206:	201f      	movs	r0, #31
 8102208:	f7ff f912 	bl	8101430 <HAL_HSEM_FastTake>
 810220c:	4603      	mov	r3, r0
 810220e:	2b00      	cmp	r3, #0
 8102210:	d1f9      	bne.n	8102206 <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 8102212:	4b43      	ldr	r3, [pc, #268]	; (8102320 <ResMgr_Init+0x12c>)
 8102214:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8102218:	2b5a      	cmp	r3, #90	; 0x5a
 810221a:	d062      	beq.n	81022e2 <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810221c:	e05a      	b.n	81022d4 <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810221e:	4a41      	ldr	r2, [pc, #260]	; (8102324 <ResMgr_Init+0x130>)
 8102220:	68bb      	ldr	r3, [r7, #8]
 8102222:	4413      	add	r3, r2
 8102224:	781b      	ldrb	r3, [r3, #0]
 8102226:	2b00      	cmp	r3, #0
 8102228:	d02a      	beq.n	8102280 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810222a:	493d      	ldr	r1, [pc, #244]	; (8102320 <ResMgr_Init+0x12c>)
 810222c:	68ba      	ldr	r2, [r7, #8]
 810222e:	4613      	mov	r3, r2
 8102230:	009b      	lsls	r3, r3, #2
 8102232:	4413      	add	r3, r2
 8102234:	009b      	lsls	r3, r3, #2
 8102236:	440b      	add	r3, r1
 8102238:	3308      	adds	r3, #8
 810223a:	2201      	movs	r2, #1
 810223c:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810223e:	4a39      	ldr	r2, [pc, #228]	; (8102324 <ResMgr_Init+0x130>)
 8102240:	68bb      	ldr	r3, [r7, #8]
 8102242:	4413      	add	r3, r2
 8102244:	781b      	ldrb	r3, [r3, #0]
 8102246:	2b01      	cmp	r3, #1
 8102248:	d109      	bne.n	810225e <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810224a:	4935      	ldr	r1, [pc, #212]	; (8102320 <ResMgr_Init+0x12c>)
 810224c:	68ba      	ldr	r2, [r7, #8]
 810224e:	4613      	mov	r3, r2
 8102250:	009b      	lsls	r3, r3, #2
 8102252:	4413      	add	r3, r2
 8102254:	009b      	lsls	r3, r3, #2
 8102256:	440b      	add	r3, r1
 8102258:	3304      	adds	r3, #4
 810225a:	2208      	movs	r2, #8
 810225c:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810225e:	4a31      	ldr	r2, [pc, #196]	; (8102324 <ResMgr_Init+0x130>)
 8102260:	68bb      	ldr	r3, [r7, #8]
 8102262:	4413      	add	r3, r2
 8102264:	781b      	ldrb	r3, [r3, #0]
 8102266:	2b02      	cmp	r3, #2
 8102268:	d11e      	bne.n	81022a8 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810226a:	492d      	ldr	r1, [pc, #180]	; (8102320 <ResMgr_Init+0x12c>)
 810226c:	68ba      	ldr	r2, [r7, #8]
 810226e:	4613      	mov	r3, r2
 8102270:	009b      	lsls	r3, r3, #2
 8102272:	4413      	add	r3, r2
 8102274:	009b      	lsls	r3, r3, #2
 8102276:	440b      	add	r3, r1
 8102278:	3304      	adds	r3, #4
 810227a:	2210      	movs	r2, #16
 810227c:	601a      	str	r2, [r3, #0]
 810227e:	e013      	b.n	81022a8 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 8102280:	4927      	ldr	r1, [pc, #156]	; (8102320 <ResMgr_Init+0x12c>)
 8102282:	68ba      	ldr	r2, [r7, #8]
 8102284:	4613      	mov	r3, r2
 8102286:	009b      	lsls	r3, r3, #2
 8102288:	4413      	add	r3, r2
 810228a:	009b      	lsls	r3, r3, #2
 810228c:	440b      	add	r3, r1
 810228e:	3308      	adds	r3, #8
 8102290:	2200      	movs	r2, #0
 8102292:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 8102294:	4922      	ldr	r1, [pc, #136]	; (8102320 <ResMgr_Init+0x12c>)
 8102296:	68ba      	ldr	r2, [r7, #8]
 8102298:	4613      	mov	r3, r2
 810229a:	009b      	lsls	r3, r3, #2
 810229c:	4413      	add	r3, r2
 810229e:	009b      	lsls	r3, r3, #2
 81022a0:	440b      	add	r3, r1
 81022a2:	3304      	adds	r3, #4
 81022a4:	2200      	movs	r2, #0
 81022a6:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 81022a8:	491d      	ldr	r1, [pc, #116]	; (8102320 <ResMgr_Init+0x12c>)
 81022aa:	68ba      	ldr	r2, [r7, #8]
 81022ac:	4613      	mov	r3, r2
 81022ae:	009b      	lsls	r3, r3, #2
 81022b0:	4413      	add	r3, r2
 81022b2:	009b      	lsls	r3, r3, #2
 81022b4:	440b      	add	r3, r1
 81022b6:	2200      	movs	r2, #0
 81022b8:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 81022ba:	4919      	ldr	r1, [pc, #100]	; (8102320 <ResMgr_Init+0x12c>)
 81022bc:	68ba      	ldr	r2, [r7, #8]
 81022be:	4613      	mov	r3, r2
 81022c0:	009b      	lsls	r3, r3, #2
 81022c2:	4413      	add	r3, r2
 81022c4:	009b      	lsls	r3, r3, #2
 81022c6:	440b      	add	r3, r1
 81022c8:	3310      	adds	r3, #16
 81022ca:	2200      	movs	r2, #0
 81022cc:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 81022ce:	68bb      	ldr	r3, [r7, #8]
 81022d0:	3301      	adds	r3, #1
 81022d2:	60bb      	str	r3, [r7, #8]
 81022d4:	68bb      	ldr	r3, [r7, #8]
 81022d6:	2b12      	cmp	r3, #18
 81022d8:	d9a1      	bls.n	810221e <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 81022da:	4b11      	ldr	r3, [pc, #68]	; (8102320 <ResMgr_Init+0x12c>)
 81022dc:	225a      	movs	r2, #90	; 0x5a
 81022de:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 81022e2:	2100      	movs	r1, #0
 81022e4:	201f      	movs	r0, #31
 81022e6:	f7ff f8bd 	bl	8101464 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d102      	bne.n	81022f6 <ResMgr_Init+0x102>
 81022f0:	683b      	ldr	r3, [r7, #0]
 81022f2:	2b00      	cmp	r3, #0
 81022f4:	d00c      	beq.n	8102310 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 81022f6:	4a0c      	ldr	r2, [pc, #48]	; (8102328 <ResMgr_Init+0x134>)
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 81022fc:	4a0b      	ldr	r2, [pc, #44]	; (810232c <ResMgr_Init+0x138>)
 81022fe:	683b      	ldr	r3, [r7, #0]
 8102300:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 8102302:	4b0a      	ldr	r3, [pc, #40]	; (810232c <ResMgr_Init+0x138>)
 8102304:	681b      	ldr	r3, [r3, #0]
 8102306:	2100      	movs	r1, #0
 8102308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 810230c:	4798      	blx	r3
 810230e:	e001      	b.n	8102314 <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 8102310:	2301      	movs	r3, #1
 8102312:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8102314:	7bfb      	ldrb	r3, [r7, #15]
}
 8102316:	4618      	mov	r0, r3
 8102318:	3710      	adds	r7, #16
 810231a:	46bd      	mov	sp, r7
 810231c:	bd80      	pop	{r7, pc}
 810231e:	bf00      	nop
 8102320:	10000010 	.word	0x10000010
 8102324:	081023a0 	.word	0x081023a0
 8102328:	10000240 	.word	0x10000240
 810232c:	10000244 	.word	0x10000244

08102330 <__libc_init_array>:
 8102330:	b570      	push	{r4, r5, r6, lr}
 8102332:	4d0d      	ldr	r5, [pc, #52]	; (8102368 <__libc_init_array+0x38>)
 8102334:	4c0d      	ldr	r4, [pc, #52]	; (810236c <__libc_init_array+0x3c>)
 8102336:	1b64      	subs	r4, r4, r5
 8102338:	10a4      	asrs	r4, r4, #2
 810233a:	2600      	movs	r6, #0
 810233c:	42a6      	cmp	r6, r4
 810233e:	d109      	bne.n	8102354 <__libc_init_array+0x24>
 8102340:	4d0b      	ldr	r5, [pc, #44]	; (8102370 <__libc_init_array+0x40>)
 8102342:	4c0c      	ldr	r4, [pc, #48]	; (8102374 <__libc_init_array+0x44>)
 8102344:	f000 f818 	bl	8102378 <_init>
 8102348:	1b64      	subs	r4, r4, r5
 810234a:	10a4      	asrs	r4, r4, #2
 810234c:	2600      	movs	r6, #0
 810234e:	42a6      	cmp	r6, r4
 8102350:	d105      	bne.n	810235e <__libc_init_array+0x2e>
 8102352:	bd70      	pop	{r4, r5, r6, pc}
 8102354:	f855 3b04 	ldr.w	r3, [r5], #4
 8102358:	4798      	blx	r3
 810235a:	3601      	adds	r6, #1
 810235c:	e7ee      	b.n	810233c <__libc_init_array+0xc>
 810235e:	f855 3b04 	ldr.w	r3, [r5], #4
 8102362:	4798      	blx	r3
 8102364:	3601      	adds	r6, #1
 8102366:	e7f2      	b.n	810234e <__libc_init_array+0x1e>
 8102368:	081023b4 	.word	0x081023b4
 810236c:	081023b4 	.word	0x081023b4
 8102370:	081023b4 	.word	0x081023b4
 8102374:	081023b8 	.word	0x081023b8

08102378 <_init>:
 8102378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810237a:	bf00      	nop
 810237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810237e:	bc08      	pop	{r3}
 8102380:	469e      	mov	lr, r3
 8102382:	4770      	bx	lr

08102384 <_fini>:
 8102384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102386:	bf00      	nop
 8102388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810238a:	bc08      	pop	{r3}
 810238c:	469e      	mov	lr, r3
 810238e:	4770      	bx	lr
